#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, doors, door1, door2, door3, door4, plat, gun, flare;
static-var  gun_1, restore_delay;

// Signal definitions
#define SIG_AIM				2

#define SMOKEPIECE1 base
#define EXPLODEPIECE1 door1
#define EXPLODEPIECE2 door3

#include "StateChg.h"

activatescr()
{
	SET ARMORED to FALSE;

	if( TRUE )
	{
	move door1 to z-axis [-5] SPEED [8];
	move door2 to x-axis [5] SPEED [8];
	move door3 to z-axis [5] SPEED [8];
	move door4 to x-axis [-5] SPEED [8];
	move doors to y-axis [-2] speed [3];
	wait-for-move door1 along z-axis;
	}
	if( TRUE )
	{
	move plat to y-axis [16] SPEED [14];
	move gun to y-axis [5] speed [10];
	wait-for-move plat along y-axis;
	}
	if( TRUE )
	{
	sleep 100;
	}
SLEEP 500;
}

deactivatescr()
{
	if( TRUE )
	{
	}
	if( TRUE )
	{
	move plat to y-axis [0] SPEED [13];
	move gun to y-axis [0] speed [10];
	wait-for-move plat along y-axis;
	}
	if( TRUE )
	{
	move door1 to z-axis [0] SPEED [8];
	move door2 to x-axis [0] SPEED [8];
	move door3 to z-axis [0] SPEED [8];
	move door4 to x-axis [0] SPEED [8];
	move doors to y-axis [0] speed [2];
	wait-for-move door1 along z-axis;
	}
SET ARMORED to TRUE;
}

#include "Explodepartsnorock.h"

Go()
{
	dont-cache gun;
	dont-cache plat;
	call-script activatescr();
	gun_1=1;
}

Stop()
{
	gun_1=0;
	cache gun;
	cache plat;
	sleep 4000;
	call-script deactivatescr();
}
#define ACTIVATECMD		call-script Go();
#define DEACTIVATECMD		call-script Stop();
#include "StateChg.h"

Create()
{
	call-script InitState();
	gun_1 = 0;
	dont-shade plat;
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;
	dont-shade gun;
	dont-cache flare;
	hide flare;

	restore_delay = 3000;
	start-script SmokeUnit();
}

Activate()
{
	dont-cache plat;
	dont-cache door1;
	dont-cache door2;
	dont-cache gun;

	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
	cache plat;
	cache door1;
	cache door2;
	cache door3;
	cache door4;
	cache gun;
}

SetMaxReloadTime(time)
{
	restore_delay = time * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !gun_1 )
	{
		sleep 500;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	move gun to y-axis [5] SPEED [500];
	show flare;
	SLEEP 150;
	hide flare;
	move gun to y-axis [3] SPEED [3];
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode plat type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode gun type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode plat type BITMAPONLY | BITMAP1;
		explode body type SHATTER | BITMAP2;
		explode door1 type FALL | BITMAP3;
		explode door2 type FALL | BITMAP4;
		explode gun type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode plat type BITMAPONLY | BITMAP1;
		explode body type SHATTER | BITMAP2;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode gun type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode plat type BITMAPONLY | BITMAP1;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode gun type BITMAPONLY | BITMAP2;
}
