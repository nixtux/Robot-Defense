#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, hallr, halll, pad, roofr, roofl, doorr, doorl,
       front1, front2, nano, beam;

static-var  statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


activatescr()
{
	turn doorr to y-axis <-90.016484> speed <100.000000>;
	turn doorl to y-axis <90.016484> speed <100.000000>;
	sleep 400;
	turn roofr to z-axis <-90.016484> speed <70.000000>;
	turn roofl to z-axis <90.016484> speed <70.000000>;
	wait-for-turn roofr around z-axis;
	wait-for-turn roofl around z-axis;
	sleep 100;
	move hallr to x-axis [-11.000000] speed [10.000000];
	move halll to x-axis [11.000000] speed [10.000000];
	wait-for-move hallr along x-axis;
	wait-for-move halll along x-axis;
	move front1 to x-axis [-3.000000] speed [10.000000];
	move front2 to x-axis [3.000000] speed [10.000000];
	wait-for-move front1 along x-axis;
	wait-for-move front2 along x-axis;
	move nano to z-axis [4.000000] speed [10.000000];
	sleep 100;
	return (0);
}

deactivatescr()
{
	sleep 100;
	move nano to z-axis [0.000000] speed [10.000000];
	wait-for-move nano along z-axis;
	move front1 to x-axis [0.000000] speed [10.000000];
	move front2 to x-axis [0.000000] speed [10.000000];
	wait-for-move front1 along x-axis;
	wait-for-move front2 along x-axis;
	move hallr to x-axis [0.000000] speed [10.000000];
	move halll to x-axis [0.000000] speed [10.000000];
	wait-for-move hallr along x-axis;
	wait-for-move halll along x-axis;
	turn roofr to z-axis <0.000000> speed <70.000000>;
	turn roofl to z-axis <0.000000> speed <70.000000>;
	sleep 400;
	turn doorr to y-axis <0.000000> speed <100.000000>;
	turn doorl to y-axis <0.000000> speed <100.000000>;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
	return (0);
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
	return (0);
}

Go()
{
	dont-cache halll;
	dont-cache hallr;
	dont-cache front1;
	dont-cache front2;
	dont-cache roofl;
	dont-cache roofr;
	dont-cache doorr;
	dont-cache doorl;
	dont-cache pad;
	dont-cache nano;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache halll;
	cache hallr;
	cache front1;
	cache front2;
	cache roofl;
	cache roofr;
	cache doorr;
	cache doorl;
	cache pad;
	cache nano;
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	dont-shade base;
	dont-shade halll;
	dont-shade hallr;
	dont-shade front1;
	dont-shade front2;
	dont-shade roofl;
	dont-shade roofr;
	dont-shade doorr;
	dont-shade doorl;
	dont-shade pad;
	dont-shade nano;
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
	return (0);
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

StartBuilding()
{
	spin pad around y-axis speed <0.000000>;
	return (0);
}

StopBuilding()
{
	stop-spin pad around y-axis;
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode halll type BITMAPONLY | BITMAP2;
		explode pad type BITMAPONLY | BITMAP3;
		explode hallr type BITMAPONLY | BITMAP1;
		explode front2 type BITMAPONLY | BITMAP1;
		explode front1 type BITMAPONLY | BITMAP2;
		explode pad type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode halll type BITMAPONLY | BITMAP2;
		explode hallr type BITMAPONLY | BITMAP3;
		explode front1 type BITMAPONLY | BITMAP1;
		explode front2 type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		explode doorr type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode doorr type BITMAPONLY | BITMAP2;
		explode front1 type BITMAPONLY | BITMAP3;
		explode front2 type BITMAPONLY | BITMAP1;
		explode halll type BITMAPONLY | BITMAP1;
		explode hallr type BITMAPONLY | BITMAP2;
		explode pad type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode halll type BITMAPONLY | BITMAP2;
	explode hallr type BITMAPONLY | BITMAP3;
	explode front1 type BITMAPONLY | BITMAP1;
	explode front2 type BITMAPONLY | BITMAP1;
	explode doorl type BITMAPONLY | BITMAP2;
	explode pad type BITMAPONLY | BITMAP2;
	return (0);
}
