#define TA
// Advanced Solar/Wind Generator 

piece base, body, anglea ,angleb ,anglec ,angled ,tower ,top, panels, panela, panelb, panelc, paneld,p1,p2,p3,p4,dish1,dish2,dish3,dish4;

static-var built, lastfanspeed, lastdir, OK;

#define SMOKEPIECE1 base
#define EXPLODEPIECE1 dish1
#define EXPLODEPIECE2 panelb
#define EXPLODEPIECE3 anglec


#include "StateChg.h"
#include "explodepartwindsolar.h"
#include "exptype.h"

Go()
	{
	dont-cache top;
	dont-cache p1;
	dont-cache p2;
	dont-cache p3;
	dont-cache p4;
	dont-cache dish1;
	dont-cache dish2;
	dont-cache dish3;
	dont-cache dish4;
	dont-cache panela;
	dont-cache panelb;
	dont-cache panelc;
	dont-cache paneld;
	SET ARMORED to FALSE;

	MOVE anglea to z-axis [5.5] SPEED [8];
	MOVE anglea to x-axis [5.5] SPEED [8];
	MOVE angleb to z-axis [5.5] SPEED [8];
	MOVE angleb to x-axis [-5.5] SPEED [8];
	MOVE anglec to z-axis [-5.5] SPEED [8];
	MOVE anglec to x-axis [-5.5] SPEED [8];
	MOVE angled to z-axis [-5.5] SPEED [8];
	MOVE angled to x-axis [5.5] SPEED [8];
	sleep 650;
	MOVE tower to y-axis [0] SPEED [20];
	
	SHOW tower;

	WAIT-FOR-MOVE tower along y-axis;

	TURN panela to x-axis <0> SPEED <80>;
	TURN panelc to x-axis <0> SPEED <80>;
	TURN panelb to z-axis <0> SPEED <80>;
	TURN paneld to z-axis <0> SPEED <80>;

	turn dish1 to x-axis <70> speed <85>;
	turn dish3 to x-axis <-70> speed <85>;
	turn dish2 to z-axis <-70> speed <85>;
	turn dish4 to z-axis <70> speed <85>;

	SLEEP 750;

	turn p1 to z-axis <-35> speed <30>;
	turn p3 to z-axis <35> speed <30>;
	turn p2 to x-axis <-35> speed <30>;
	turn p4 to x-axis <35> speed <30>;

	WAIT-FOR-TURN dish1 around x-axis;
	
	spin top around y-axis speed lastfanspeed;

	OK=1;
	}

Stop()
	{
	OK=0;

	TURN panela to x-axis <90> SPEED <90>;
	TURN panelc to x-axis <-90> SPEED <90>;
	TURN panelb to z-axis <90> SPEED <90>;
	TURN paneld to z-axis <-90> SPEED <90>;

	spin top around y-axis speed <0>;

	turn p1 to z-axis <0> speed <30>;
	turn p3 to z-axis <0> speed <30>;
	turn p2 to x-axis <0> speed <30>;
	turn p4 to x-axis <0> speed <30>;

	sleep 500;

	turn top to y-axis <00> speed <90>;

	WAIT-FOR-TURN top around y-axis;

	turn dish1 to x-axis <0> speed <105>;
	turn dish3 to x-axis <0> speed <105>;
	turn dish2 to z-axis <0> speed <105>;
	turn dish4 to z-axis <0> speed <105>;

	wait-for-turn dish1 around x-axis;
	wait-for-turn dish2 around x-axis;
	wait-for-turn dish3 around z-axis;
	wait-for-turn dish4 around z-axis;

	MOVE tower to y-axis [-25] SPEED [20];
	sleep 1000;
	HIDE tower;
	SLEEP 300;
	wait-for-move tower along y-axis;
	MOVE anglea to z-axis [0] SPEED [8];
	MOVE anglea to x-axis [0] SPEED [8];
	MOVE angleb to z-axis [0] SPEED [8];
	MOVE angleb to x-axis [0] SPEED [8];
	MOVE anglec to z-axis [0] SPEED [8];
	MOVE anglec to x-axis [0] SPEED [8];
	MOVE angled to z-axis [0] SPEED [8];
	MOVE angled to x-axis [0] SPEED [8];

	cache top;
	cache dish1;
	cache dish2;
	cache dish3;
	cache dish4;
	cache panela;
	cache panelb;
	cache panelc;
	cache paneld;

	SET ARMORED to TRUE;
	}

#define ACTIVATECMD call-script Go();
#define DEACTIVATECMD call-script Stop();
#include "StateChg.h"

Create()
	{
	
	HIDE tower;	
	
	dont-cache tower;
	dont-cache top;
	dont-cache p1;
	dont-cache p2;
	dont-cache p3;
	dont-cache p4;
	dont-cache dish1;
	dont-cache dish2;
	dont-cache dish3;
	dont-cache dish4;
	dont-cache panela;
	dont-cache panelb;
	dont-cache panelc;
	dont-cache paneld;



	dont-shade tower;
	dont-shade anglea;
	dont-shade angleb;
	dont-shade anglec;
	dont-shade angled;

	lastfanspeed = <5>;
	lastdir = 0;
	OK=0;

	MOVE tower to y-axis [-25] NOW;

	TURN panela to x-axis <90> NOW;
	TURN panelc to x-axis <-90> NOW;
	TURN panelb to z-axis <90> NOW;
	TURN paneld to z-axis <-90> NOW;

	call-script InitState();
	start-script SmokeUnit();
	}

Activate()
	{
	start-script RequestState( ACTIVE );
	}

Deactivate()
	{
	start-script RequestState( INACTIVE );
	}

SetSpeed(fanspeed)
	{
	var vitesse;
	if( (get BUILD_PERCENT_LEFT)==0 )
		{
		lastfanspeed = fanspeed / 3;
		if (!OK) { fanspeed=0; }
		vitesse=fanspeed / 3;
		spin top around y-axis speed (vitesse);
		if (!OK) { turn top to y-axis <00> speed <40>; }
		sleep 100;
		}
	sleep 100;
	}

SetDirection(dir)
	{
	if( (get BUILD_PERCENT_LEFT)==0 )
		{
		lastdir = dir;
		if (!OK) { dir=0; }
		//turn top to y-axis dir speed <20>;
		sleep 100;
		}
	sleep 100;
	}

SweetSpot(piecenum)
	{
	piecenum=body;
	}

Killed( severity, corpsetype )
	{
	if (severity <= 25)
		{
		corpsetype = 1;
		explode body type	BITMAPONLY | BITMAP1;
		explode top type	BITMAPONLY | BITMAP2;
		explode tower type	BITMAPONLY | BITMAP3;
		}

	if (severity <= 50)
		{
		corpsetype = 2;
		explode body type	BITMAPONLY | BITMAP1;
		explode top type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode panela type	BITMAPONLY | BITMAP3;
		return( 0 );
		}

	if (severity <= 99)
		{
		corpsetype = 3;
		explode body type	BITMAPONLY | BITMAP1;
		explode dish2 type	SHATTER | BITMAP2;
		explode panela type	BITMAPONLY | BITMAP3;
		return( 0 );
		}

	corpsetype = 3;
	explode body type	BITMAPONLY | BITMAP1;
	explode anglea type	SHATTER | BITMAP2;
	explode panela type	BITMAPONLY | BITMAP3;
	return( 0 );
	}
