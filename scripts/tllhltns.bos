piece base,tower,turret,sleeves,gun,flare,barrel;
piece wake1,wake2,wake3,wake4,wake5,wake6,wake7,wake8;

#define SIG_AIM	2
#define SMOKEPIECE1 turret

#include "smokeunit.h"
#include "EXPtype.h"
#include "rockunit.h"

Create()
 { dont-shade tower;
   dont-cache sleeves;
   dont-cache gun;
   dont-cache barrel;
   dont-cache flare;
   hide flare;
   start-script SmokeUnit();
  }

AimPrimary(heading,pitch)
 { signal SIG_AIM;
   set-signal-mask SIG_AIM;
     emit-sfx SFXTYPE_WAKE1 from wake1;
     emit-sfx SFXTYPE_WAKE1 from wake2;
     emit-sfx SFXTYPE_WAKE1 from wake3;
     emit-sfx SFXTYPE_WAKE1 from wake4;
     emit-sfx SFXTYPE_WAKE1 from wake5;
     emit-sfx SFXTYPE_WAKE1 from wake6;
     emit-sfx SFXTYPE_WAKE1 from wake7;
     emit-sfx SFXTYPE_WAKE1 from wake8;
   turn turret to y-axis heading speed <150>;
   turn sleeves to x-axis (0-pitch) speed <70>;
   wait-for-turn turret around y-axis;
   wait-for-turn sleeves around x-axis;
     emit-sfx SFXTYPE_WAKE1 from wake1;
     emit-sfx SFXTYPE_WAKE1 from wake2;
     emit-sfx SFXTYPE_WAKE1 from wake3;
     emit-sfx SFXTYPE_WAKE1 from wake4;
     emit-sfx SFXTYPE_WAKE1 from wake5;
     emit-sfx SFXTYPE_WAKE1 from wake6;
     emit-sfx SFXTYPE_WAKE1 from wake7;
     emit-sfx SFXTYPE_WAKE1 from wake8;
   return(TRUE);
  }

FirePrimary()
 { 
   turn gun to z-axis <180> speed <380>;
   show flare;
   move barrel to z-axis [-1] speed [500];
   sleep 150;
   hide flare;
   move barrel to z-axis [0] speed [50];	
   wait-for-turn gun around z-axis;
   turn gun to z-axis <0> NOW;
  }

AimFromPrimary(piecenum)
 { piecenum=sleeves;
  }

QueryPrimary(piecenum)
 { piecenum=flare;
  }

SweetSpot(piecenum)
 { piecenum=base;
  }

Killed( severity, corpsetype )
 { explode sleeves type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
   explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
   explode tower type BITMAPONLY | BITMAP4;
   if (severity <= 25)
    { corpsetype = 1;
      return( 0 );
     }
   if (severity <= 50)
    { corpsetype = 2;
      return( 0 );
     }
   corpsetype = 3;
  }
