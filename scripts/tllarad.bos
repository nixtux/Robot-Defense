// Arm Radar Tower script

piece base,body,top,tige1,tige2,tige3,dish1,dish2,dish3,dish4;

#define SIG_HIT		2
#define SMOKEPIECE1 body
#define EXPLODEPIECE1 dish4
#define EXPLODEPIECE2 dish1


#include "StateChg.h"
#include "explodepartsarad.h"
#include "exptype.h"

Go()
	{
	dont-cache dish1;
	dont-cache dish2;
	dont-cache dish3;
	dont-cache dish4;

	dont-cache top;

	SET ARMORED to FALSE;
	move tige1 to y-axis [8] speed [5];
	sleep 450;
	move tige2 to y-axis [8] speed [5];
	sleep 450;
	move tige3 to y-axis [8] speed [5];
	sleep 450;

	turn dish1 to z-axis <-120> speed <35>;
	turn dish4 to z-axis <120> speed <35>;
	turn dish2 to x-axis <120> speed <35>;
	turn dish3 to x-axis <-120> speed <35>;


	spin top around y-axis speed <40>;
	}

Stop()
	{
	cache dish1;
	cache dish2;
	cache dish3;
	cache dish4;

	cache top;

	stop-spin top around y-axis;
	turn top to y-axis <0> speed <150>;
	turn dish1 to z-axis <0> speed <65>;
	turn dish4 to z-axis <0> speed <65>;
	turn dish2 to x-axis <0> speed <65>;
	turn dish3 to x-axis <0> speed <65>;

	wait-for-turn top around y-axis;

	move tige3 to y-axis [0] speed [5];
	sleep 450;
	move tige2 to y-axis [0] speed [5];
	sleep 450;
	move tige1 to y-axis [0] speed [5];
	sleep 450;


	SET ARMORED to TRUE;
	}

#define ACTIVATECMD call-script Go();
#define DEACTIVATECMD call-script Stop();
#include "StateChg.h"


Create()
	{

	dont-shade dish1;
	dont-shade dish2;
	dont-shade dish3;
	dont-shade dish4;

	dont-shade tige1;
	dont-shade tige2;
	dont-shade tige3;
	dont-shade top;


	call-script InitState();
	start-script SmokeUnit();
	}

Activate()
	{
	start-script RequestState( ACTIVE );
	}

Deactivate()
	{
	start-script RequestState( INACTIVE );
	}



SweetSpot(piecenum)
	{
	piecenum=base;
	}

Killed( severity, corpsetype )
	{
	if (severity <= 25)
		{
		corpsetype = 1;

		// Blow off the pieces in varied ways

		explode top type	BITMAPONLY | BITMAP2;
		explode dish1 type	BITMAPONLY | BITMAP1;
		explode dish2 type	BITMAPONLY | BITMAP1;
		explode dish3 type	BITMAPONLY | BITMAP1;
		explode dish4 type	BITMAPONLY | BITMAP1;
		explode dish3 type	BITMAPONLY | BITMAP1;

		explode tige2 type	BITMAPONLY | BITMAP1;
		return( 0 );
		}

	if (severity <= 50)
		{
		corpsetype = 2;

		// Blow off the pieces in varied ways

		explode body type	BITMAPONLY | BITMAP2;
		explode dish1 type	BITMAPONLY | BITMAP1;
		explode dish2 type	BITMAPONLY | BITMAP1;
		explode dish3 type	BITMAPONLY | BITMAP1;
		explode dish4 type	BITMAPONLY | BITMAP1;
		explode top type	SHATTER | BITMAP1;
		return( 0 );
		}

	if (severity <= 99)
		{
		corpsetype = 3;

		// Blow off the pieces in varied ways

		explode tige1 type	BITMAPONLY | BITMAP2;
		explode dish1 type	BITMAPONLY | BITMAP1;
		explode dish2 type	BITMAPONLY | BITMAP1;
		explode top type	BITMAPONLY | BITMAP1;
		explode body type	SHATTER | BITMAP1;
		return( 0 );
		}

	// If severity is over 50, the unit just disintigrated.
	corpsetype = 3;

	explode dish1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode dish2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode dish3 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode dish4 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode top type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode tige2 type	BITMAPONLY | BITMAP2;
	explode tige1 type	BITMAPONLY | BITMAP1;
	explode body type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
	return( 0 );
	}
