#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, rotor, engine, door1, door2, door3, wake1, wake2, wake3, wake4;

#define SMOKEPIECE1 body
#define EXPLODEPIECE1 door3
#define EXPLODEPIECE2 door2

#include "StateChg.h"

static-var statechg_DesiredState, statechg_StateChanging;

activatescr()
{
	move body to y-axis [0] speed [8];
	emit-sfx 256 | 3 from wake1;
	emit-sfx 256 | 3 from wake2;
	emit-sfx 256 | 3 from wake3;
	emit-sfx 256 | 3 from wake4;
	sleep 300;
	emit-sfx 256 | 3 from wake1;
	emit-sfx 256 | 3 from wake2;
	emit-sfx 256 | 3 from wake3;
	emit-sfx 256 | 3 from wake4;

	turn door3 to y-axis <180> speed <200>;
	wait-for-turn door3 around y-axis;
	move door3 to y-axis [-7] speed [15];
	wait-for-move door3 along y-axis;
	hide door3;	

	turn door2 to y-axis <-180> speed <200>;
	wait-for-turn door2 around y-axis;
	move door2 to y-axis [-7] speed [15];
	wait-for-move door2 along y-axis;
	hide door2;	

	emit-sfx 256 | 3 from wake1;
	emit-sfx 256 | 3 from wake2;
	emit-sfx 256 | 3 from wake3;
	emit-sfx 256 | 3 from wake4;

	turn door1 to y-axis <180> speed <200>;
	wait-for-turn door1 around y-axis;
	move door1 to y-axis [-7] speed [15];
	wait-for-move door1 along y-axis;
	hide door1;

	show engine;
	show rotor;
	move engine to y-axis [0] speed [5];
	wait-for-move engine along y-axis;

	spin rotor around y-axis speed <60>;

	Sleep 125;
}

deactivatescr()
{
	move engine to y-axis [-5] speed [10];
	stop-spin rotor around y-axis;

	move engine to y-axis [-5] speed [10];
	wait-for-move engine along y-axis;

	hide engine;
	hide rotor;

	show door1;
	move door1 to y-axis [0] speed [15];
	wait-for-move door1 along y-axis;
	turn door1 to y-axis <0> speed <200>;
	wait-for-turn door1 around y-axis;

	show door2;
	move door2 to y-axis [0] speed [15];
	wait-for-move door2 along y-axis;
	turn door2 to y-axis <0> speed <200>;
	wait-for-turn door2 around y-axis;

	show door3;
	move door3 to y-axis [0] speed [15];
	wait-for-move door3 along y-axis;
	turn door3 to y-axis <0> speed <200>;
	wait-for-turn door3 around y-axis;

	move body to y-axis [-10] speed [8];
	sleep 150;

	emit-sfx 256 | 3 from wake1;
	emit-sfx 256 | 3 from wake2;
	emit-sfx 256 | 3 from wake3;
	emit-sfx 256 | 3 from wake4;

	sleep 16;

	emit-sfx 256 | 3 from wake1;
	emit-sfx 256 | 3 from wake2;
	emit-sfx 256 | 3 from wake3;
	emit-sfx 256 | 3 from wake4;

	sleep 16;

	emit-sfx 256 | 3 from wake1;
	emit-sfx 256 | 3 from wake2;
	emit-sfx 256 | 3 from wake3;
	emit-sfx 256 | 3 from wake4;


}

Go()
{
	call-script activatescr();

	dont-cache engine;
	dont-cache rotor;
	
	SET ARMORED to FALSE;
}

Stop()
{
	call-script deactivatescr();

	SET ARMORED to TRUE;

	cache engine;
	cache rotor;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}
	

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

#define ACTIVATECMD			call-script Go();
#define DEACTIVATECMD		call-script Stop();
//include "StateChg.h"

Create()
{
  	dont-shade body;
  	dont-shade door1;
  	dont-shade door2;
	dont-shade door3;
	move body to y-axis [-10] now;

	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed( severity, corpsetype )
{ if (severity <= 25)
   { corpsetype = 1;
     explode body type BITMAPONLY | BITMAP1;
     explode rotor type BITMAPONLY | BITMAP3;
     return( 0 );
    }
  if (severity <= 50)
   { corpsetype = 2;
     explode body type BITMAPONLY | BITMAP3;
     explode rotor type SHATTER | BITMAP2;
     return( 0 );
    }
  corpsetype = 3;
  explode body type BITMAPONLY | BITMAP3;
  explode rotor type SHATTER | EXPLODE_ON_HIT | BITMAP1;
  explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
  return( 0 );
 }
