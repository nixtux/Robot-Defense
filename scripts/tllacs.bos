piece base,body,arm,nano,spray,door1,door2,wake1,wake2,bearing;

static-var	buildheading;

#include "EXPtype.h"
#include "SFXtype.h"

#define	SIG_WAKE 2

#define SMOKEPIECE1 arm
#include "smokeunit.h"
#include "StateChg.h"

StartMoving()
{ signal SIG_WAKE;
  set-signal-mask SIG_WAKE;
  while (TRUE)
   { emit-sfx SFXTYPE_WAKE1 from wake1;
     emit-sfx SFXTYPE_WAKE1 from wake2;
     sleep 200;
    }
 }

StopMoving()
{ signal SIG_WAKE;
 }

Go()
{ turn door1 to z-axis <-90> speed <180>;
  turn door2 to z-axis <90> speed <180>;
  sleep 500;
  turn arm to x-axis <90> speed <90>;
  turn nano to x-axis <-90> speed <90>;
  move bearing to z-axis [-4] speed [4];
  wait-for-turn nano around x-axis;
  turn bearing to y-axis buildheading speed <160>;
  wait-for-turn bearing around y-axis;
  set INBUILDSTANCE to TRUE;
 }

Stop()
{ set INBUILDSTANCE to FALSE;

  turn bearing to y-axis <0> speed <160>;
  wait-for-turn bearing around y-axis;
  move bearing to z-axis [0] speed [5];
  turn arm to x-axis <0> speed <90>;
  turn nano to x-axis <0> speed <90>;
  wait-for-turn nano around x-axis;
  turn door1 to z-axis <0> speed <180>;
  turn door2 to z-axis <0> speed <180>;
  wait-for-turn door1 around z-axis;
 }

#define ACTIVATECMD call-script Go();
#define DEACTIVATECMD call-script Stop();
#include "StateChg.h"

Create()
{ buildheading = <0>;
  call-script InitState();
  start-script SmokeUnit();
 }

Activate()
{ start-script RequestState( ACTIVE );
 }

Deactivate()
{ start-script RequestState( INACTIVE );
 }

StartBuilding(heading)
{ buildheading = heading;
  start-script RequestState( ACTIVE );
 }

StopBuilding()
{ start-script RequestState( INACTIVE );
 }

QueryNanoPiece(piecenum)
{ piecenum=spray;
 }

TargetHeading( heading )
{ buildheading = 0 - heading;
 }

SweetSpot(piecenum)
{ piecenum=body;
 }

Killed( severity, corpsetype )
{ explode body type BITMAPONLY | BITMAP4;
  explode arm type BITMAPONLY | BITMAP5;
  explode door1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
  explode door2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
  if (severity <= 25)
   { corpsetype = 1;
     return( 0 );
    }
  explode nano type SHATTER | BITMAP2;
  explode arm type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
  explode door1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
  if (severity <= 50)
   { corpsetype = 2;
     return( 0 );
    }
  explode body type SHATTER | BITMAP2;
  explode nano type BITMAPONLY | BITMAP4;
  corpsetype = 3;
 }
