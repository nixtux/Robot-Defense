#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret1, turret2, turret3, barrel1, barrel2, barrel3,
       flare1, flare2, flare3, p;

static-var  restore_delay, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_3			8


HitByWeapon(anglex, anglez)
{
	var Func_Var_3;
	Func_Var_3 = get HEALTH;
	if( Func_Var_3 <= 60 )
	{
		if( Static_Var_3 == 0 )
		{
			Static_Var_3 = 1;
			hide p;
			explode p type FALL | SHATTER | SMOKE | BITMAP2;
		}
	}
	if( Func_Var_3 <= 50 )
	{
		if( Static_Var_4 == 0 )
		{
			Static_Var_4 = 1;
			hide p;
			explode p type FALL | SHATTER | SMOKE | BITMAP2;
		}
	}
	if( Func_Var_3 <= 35 )
	{
		if( Static_Var_5 == 0 )
		{
			Static_Var_5 = 1;
			hide p;
			explode p type FALL | SHATTER | SMOKE | BITMAP2;
		}
	}
	turn base to z-axis anglez speed <105.000000>;
	turn base to x-axis anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	Static_Var_3 = 0;
	Static_Var_4 = 0;
	Static_Var_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent >= 40 )
		{
			if( Static_Var_5 == 1 )
			{
				Static_Var_5 = 0;
				show p;
			}
		}
		if( healthpercent >= 60 )
		{
			if( Static_Var_4 == 1 )
			{
				Static_Var_4 = 0;
				show p;
			}
		}
		if( healthpercent >= 75 )
		{
			if( Static_Var_3 == 1 )
			{
				Static_Var_3 = 0;
				show p;
			}
		}
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret1;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	Static_Var_2 = 0;
	restore_delay = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	set-signal-mask SIG_AIM;
	sleep restore_delay;
	turn turret1 to y-axis <0.000000> speed <10.000000>;
}

RestoreAfterDelay3()
{
	set-signal-mask SIG_AIM_3;
	sleep restore_delay;
	turn turret2 to y-axis <0.000000> speed <85.000000>;
	turn turret3 to y-axis <0.000000> speed <85.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <10.000000>;
	wait-for-turn turret1 around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{

}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	if( heading >= 0 AND heading <= 32760 )
	{
		Static_Var_2 = 0;
		turn turret3 to y-axis heading speed <100.000000>;
		wait-for-turn turret3 around y-axis;
	}
	if( heading >= 32760 AND heading <= 65520 )
	{
		Static_Var_2 = 1;
		turn turret2 to y-axis heading speed <100.000000>;
		wait-for-turn turret2 around y-axis;
	}
	start-script RestoreAfterDelay3();
	return (1);
}

FireTertiary()
{
	if( Static_Var_2 == 0 )
	{
	
	}
	if( Static_Var_2 == 1 )
	{
		
	}
}

AimFromTertiary(piecenum)
{
	if( Static_Var_2 == 0 )
	{
		piecenum = turret3;
	}
	if( Static_Var_2 == 1 )
	{
		piecenum = turret2;
	}
}

QueryTertiary(piecenum)
{
	piecenum = flare3;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	hide flare1;
	explode base type BITMAPONLY | BITMAP4;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode turret1 type BITMAPONLY | BITMAP2;
		explode body type BITMAPONLY | BITMAP3;
		return (0);
	}
	explode barrel2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (0);
	}
	corpsetype = 3;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP3;
}
