#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body ,flare1, turret, sleeve, barrel1,barrel2,flare2,p,p2;

static-var  OK, restore_delay, gun_0,position;

// Signal definitions
#define SIG_AIM				2

#define SMOKEPIECE1 base
#define EXPLODEPIECE1 p
#define EXPLODEPIECE2 p
#define EXPLODEPIECE3 p
#include "explodepartsnorock.h"
#include "StateChg.h"

activatescr()
{
	set ARMORED to FALSE;
	move turret to y-axis [0] speed [5];
	wait-for-move turret along y-axis;
	move barrel1 to z-axis [0] speed [6];
	move barrel2 to z-axis [0] speed [6];
	wait-for-move barrel1 along y-axis;

}

deactivatescr()
{
	move barrel1 to z-axis [-8] speed [10];
	move barrel2 to z-axis [-8] speed [10];
	wait-for-move barrel1 along z-axis;
	move turret to y-axis [-5.8] speed [5];
	wait-for-move turret along y-axis;
	sleep 1000;
	set ARMORED to TRUE;
}

Go()
{
	dont-cache sleeve;
	dont-cache turret;
	if( !OK )
	{
		call-script activatescr();
	}
	OK = 1;
}

Stop()
{
	OK = 0;
	call-script deactivatescr();
	cache turret;
}
#define ACTIVATECMD		call-script Go();
#define DEACTIVATECMD		call-script Stop();
#include "StateChg.h"

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	if (position == 0)
		{
		turn turret to y-axis <0> speed <80.0>;
		}
	if (position == 1)
		{
		turn turret to y-axis <180> speed <80.0>;
		} 
           TURN sleeve to x-axis <0> SPEED <100>;
	wait-for-turn sleeve around x-axis;
	start-script RequestState(1);
}

Create()
{
	dont-cache barrel2;
	dont-cache barrel1;
	dont-shade sleeve;
	dont-shade turret;
	dont-cache flare1;
	dont-cache flare2;
	dont-cache p2;
	dont-cache p;
	
	hide flare1;
	hide flare2;

	OK = 1;
	gun_0=0;

	restore_delay = 3000;
	call-script InitState();
	start-script SmokeUnit();
	start-script RequestState(0);
	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script RestoreAfterDelay();
}

SetMaxReloadTime(time)
{
	restore_delay = time * 2;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !OK )
	{
		sleep 250;
	}
	if (Heading < <270> and heading > <90> )
		{
		position = 1;
		}
	if (Heading > <270> or heading < <90> )
		{
		position = 0;
		}

	turn turret to y-axis heading speed <80>;
	TURN sleeve to x-axis (0 - pitch) SPEED <100>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
if (gun_0==0)
	{
	move barrel1 to z-axis [-3] speed [500];
	SHOW flare1;
	sleep 150;
	move barrel1 to z-axis [0] speed [5];
	HIDE flare1;
	}
if (gun_0==1)
	{
	move barrel2 to z-axis [-3] speed [500];
	SHOW flare2;
	sleep 150;
	move barrel2 to z-axis [0] speed [5];
	HIDE flare2;
	}
gun_0= !gun_0;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
if(gun_0==0) 
	{piecenum = flare1;}
if(gun_0==1) 
	{piecenum = flare2;}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		if( OK )
		{
			corpsetype = 1;
		}
		if( !OK )
		{
			corpsetype = 2;
		}
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode p type BITMAPONLY | BITMAP5;
		explode barrel2 type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode sleeve type BITMAPONLY | BITMAP3;
	}
	if( severity <= 50 )
	{
		if( OK )
		{
			corpsetype = 2;
		}
		if( !OK )
		{
			corpsetype = 3;
		}
		explode body type SHATTER | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode barrel1 type FALL | BITMAP3;
		explode sleeve type FALL | BITMAP5;
		explode barrel2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		if( OK )
		{
			corpsetype = 3;
		}
		if( !OK )
		{
			corpsetype = 4;
		}
		explode turret type SHATTER | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode P type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP4;
		return (0);
	}
	corpsetype = 4;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode body type BITMAPONLY | BITMAP2;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel2 type BITMAPONLY | BITMAP3;
	explode turret type BITMAPONLY | BITMAP4;
	explode barrel1 type BITMAPONLY | BITMAP5;
}
