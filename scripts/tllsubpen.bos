#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, lnano, rnano, sonar, lights, rdoor, ldoor, rarm1, rarm2, larm1, larm2;

static-var  spray, unitviewer;

// Signal definitions
#define SIG_ACTIVATE			2

#include "StateChg.h"

activatescr()
{
	if( TRUE )
	{
	move rdoor to z-axis [4] speed [5];
	move ldoor to z-axis [-4] speed [5];
	sleep 750;
	}
	if( TRUE )
	{
	move rarm1 to x-axis [-5] speed [5];
	move larm1 to x-axis [-5] speed [5];
	move rarm2 to x-axis [-4] speed [5];
	move larm2 to x-axis [-4] speed [5];
	sleep 1200;
	}
SLEEP 80;
}

deactivatescr()
{
	if( TRUE )
	{
	move rarm1 to x-axis [0] speed [5];
	move larm1 to x-axis [0] speed [5];
	move rarm2 to x-axis [0] speed [5];
	move larm2 to x-axis [0] speed [5];
	SLEEP 1200;
	}
	if( TRUE )
	{
	move rdoor to z-axis [0] speed [3];
	move ldoor to z-axis [0] speed [3];
	}
	sleep 47;
}

#include "Yard.h"

Go()
{
	dont-cache lnano;
	dont-cache rnano;
	dont-cache larm1;
	dont-cache rarm1;
	dont-cache larm2;
	dont-cache rarm2;
	dont-cache rdoor;
	dont-cache ldoor;
	dont-cache lights;
		
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache rnano;
	cache lnano;
	cache larm1;
	cache rarm1;
	cache larm2;
	cache rarm2;
	cache rdoor;
	cache ldoor;
	cache lights;
}

#define ACTIVATECMD		call-script Go();
#define DEACTIVATECMD		call-script Stop();
#include "StateChg.h"

Create()
{

	dont-shade rdoor;
	dont-shade ldoor;

	dont-shade body;
	dont-shade lights;
	

	unitviewer = FALSE;
	spray = 0;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
		{
		sleep 1000;
		}
	spin sonar around y-axis speed <50>;

}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = rnano;
	}
	if( spray != 0 )
	{
		piecenum = lnano;
	}
	spray = !spray;
}

Demo()
{
	unitviewer = TRUE;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{

}

StopBuilding()
{

}

QueryBuildInfo(piecenum)
{
	piecenum = body;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode rnano type BITMAPONLY | BITMAP1;
		explode rdoor type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode rdoor type BITMAPONLY | BITMAP1;
		explode ldoor type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type BITMAPONLY | BITMAP1;
		explode ldoor type BITMAPONLY | BITMAP1;
		explode rdoor type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode body type BITMAPONLY | BITMAP1;
	explode rdoor type BITMAPONLY | BITMAP1;
	explode ldoor type BITMAPONLY | BITMAP2;
}
