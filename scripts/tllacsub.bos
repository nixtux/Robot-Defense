#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, door1, door2, beam, arms, nano, pivot, wake1, wake2;

static-var  bHeading;

// Signal definitions
#define SIG_MOVE			2

#include "StateChg.h"

activatescr()
{
	if( TRUE )
	{
		turn door1 to z-axis <0.0> now;
		turn door1 to z-axis <179> speed <100>;
		turn door2 to z-axis <0.0> now;
		turn door2 to z-axis <-179> speed <100>;
		sleep 1000;
	}
	if( TRUE )
	{
		move pivot to z-axis [-1.5] speed [1.5];
		turn arms to x-axis <90> speed <95>;
		turn beam to x-axis <-90> speed <95>;
		sleep 700;
	}
	sleep 16;
}

deactivatescr()
{

	if( TRUE )
	{
		turn arms to x-axis <0> speed <45>;
		turn beam to x-axis <-0> speed <45>;
		move pivot to z-axis [0] speed [1];
		sleep 960;
	}
	if( TRUE )
	{
		turn door1 to z-axis <0> speed <100>;
		turn door2 to z-axis <0> speed <100>;
	}
	sleep 12;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 256 | 3 from wake1;
		emit-sfx 256 | 3 from wake2;
		sleep 250;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

Go()
{
	call-script activatescr();
	
	sleep 500;

	turn pivot to y-axis bHeading speed <190>;
	wait-for-turn pivot around y-axis;	

	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	sleep 500;
	turn pivot to y-axis <0> speed <100>;
	call-script deactivatescr();
}
#define ACTIVATECMD			call-script Go();
#define DEACTIVATECMD		call-script Stop();
#include "StateChg.h"

Create()
{
	hide wake1;
	hide wake2;

	bHeading = 0;
	call-script InitState();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	bHeading = Func_Var_1;
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = nano;
}

TargetHeading(Func_Var_1)
{
	bHeading = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode beam type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode arms type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode wake1 type FALL | BITMAP5;
		explode beam type FALL | BITMAP2;
		explode arms type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type BITMAPONLY | BITMAP1;
		explode beam type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode wake1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode arms type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode body type BITMAPONLY | BITMAP1;
	explode beam type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type BITMAPONLY | BITMAP3;
	explode door2 type BITMAPONLY | BITMAP4;
	explode wake1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode arms type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;

}
