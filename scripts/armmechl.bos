#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  Base, Body, Door1, NanoDoors1A, NanoDoors1B, NanoPosts1, NanoGuns1, Spray1A,
       Spray1B, Door2, NanoDoors2A, NanoDoors2B, NanoPosts2, NanoGuns2, Spray2A, Spray2B,
       ClampBeam, Clamps1, Clamps2, NanoPad;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6;

// Signal definitions
#define SIG_ACTIVATE			2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from Base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
	return (0);
}

deactivatescr()
{
	if( Static_Var_6 )
	{
		turn NanoGuns1 to z-axis <0.000000> speed <30.000000>;
		turn NanoGuns2 to z-axis <0.000000> speed <30.000000>;
		sleep 500;
	}
	if( Static_Var_6 )
	{
		turn NanoPosts1 to z-axis <0.000000> speed <80.000000>;
		turn NanoPosts2 to z-axis <0.000000> speed <80.000000>;
		wait-for-turn NanoPosts2 around z-axis;
	}
	if( Static_Var_6 )
	{
		turn NanoDoors2B to z-axis <0.000000> speed <100.000000>;
		turn NanoDoors1B to z-axis <0.000000> speed <100.000000>;
		sleep 600;
	}
	if( Static_Var_6 )
	{
		turn NanoDoors1A to z-axis <0.000000> speed <80.000000>;
		turn NanoDoors2A to z-axis <0.000000> speed <80.000000>;
		wait-for-turn NanoDoors2A around z-axis;
	}
	if( Static_Var_6 )
	{
		move Door1 to x-axis [11.000000] speed [0.750000];
		move Door2 to x-axis [-11.000000] speed [0.750000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_6 )
	{
		move Door1 to x-axis [5.000000] speed [2.500000];
		move Door2 to x-axis [-5.000000] speed [2.500000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_6 )
	{
		move Door1 to x-axis [1.000000] speed [4.000000];
		move Door2 to x-axis [-1.000000] speed [4.000000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_6 )
	{
		move Door1 to x-axis [0.650000] speed [3.000000];
		move Door2 to x-axis [-0.650000] speed [3.000000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_6 )
	{
		move Door1 to x-axis [0.400000] speed [2.000000];
		move Door2 to x-axis [-0.400000] speed [2.000000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_6 )
	{
		move Door1 to x-axis [0.200000] speed [1.000000];
		move Door2 to x-axis [-0.200000] speed [1.000000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_6 )
	{
		move Door1 to x-axis [0.100000] speed [0.500000];
		move Door2 to x-axis [-0.100000] speed [0.500000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_6 )
	{
		move Door1 to x-axis [0.000000] speed [0.250000];
		move Door2 to x-axis [0.000000] speed [0.250000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_6 )
	{
		turn ClampBeam to x-axis <-85.000000> speed <7.000000>;
		wait-for-turn ClampBeam around x-axis;
	}
	if( Static_Var_6 )
	{
		turn ClampBeam to x-axis <-75.000000> speed <14.000000>;
		wait-for-turn ClampBeam around x-axis;
	}
	if( Static_Var_6 )
	{
		turn ClampBeam to x-axis <-55.000000> speed <24.000000>;
		wait-for-turn ClampBeam around x-axis;
	}
	if( Static_Var_6 )
	{
		turn ClampBeam to x-axis <-30.000000> speed <38.000000>;
		wait-for-turn ClampBeam around x-axis;
	}
	if( Static_Var_6 )
	{
		turn ClampBeam to x-axis <-20.000000> speed <25.000000>;
		wait-for-turn ClampBeam around x-axis;
	}
	if( Static_Var_6 )
	{
		turn ClampBeam to x-axis <-10.000000> speed <15.000000>;
		turn Clamps1 to z-axis <20.000000> speed <30.000000>;
		turn Clamps2 to z-axis <-20.000000> speed <30.000000>;
		wait-for-turn ClampBeam around x-axis;
	}
	if( Static_Var_6 )
	{
		turn ClampBeam to x-axis <-5.000000> speed <10.000000>;
		wait-for-turn ClampBeam around x-axis;
	}
	if( Static_Var_6 )
	{
		turn ClampBeam to x-axis <-2.000000> speed <6.000000>;
		wait-for-turn ClampBeam around x-axis;
	}
	if( Static_Var_6 )
	{
		turn ClampBeam to x-axis <0.000000> speed <4.000000>;
		wait-for-turn ClampBeam around x-axis;
		sleep 250;
	}
	if( Static_Var_6 )
	{
		turn Clamps1 to z-axis <7.000000> speed <25.000000>;
		turn Clamps2 to z-axis <-7.000000> speed <25.000000>;
		wait-for-turn Clamps2 around z-axis;
	}
	if( Static_Var_6 )
	{
		turn Clamps1 to z-axis <0.000000> speed <60.000000>;
		turn Clamps2 to z-axis <0.000000> speed <60.000000>;
		wait-for-turn Clamps2 around z-axis;
		Static_Var_6 = 0;
	}
	return (0);
}

Stop()
{
	set-signal-mask SIG_ACTIVATE;
	sleep 15000;
	set INBUILDSTANCE to 0;
	Static_Var_6 = 1;
	Static_Var_5 = 0;
	set-signal-mask 0;
	call-script CloseYard();
	call-script deactivatescr();
	return (0);
}

activatescr()
{
	signal SIG_ACTIVATE;
	if( Static_Var_4 )
	{
		move Clamps1 to x-axis [0.600000] speed [1.200000];
		move Clamps2 to x-axis [-0.600000] speed [1.200000];
		sleep 500;
	}
	if( Static_Var_4 )
	{
		turn Clamps1 to z-axis <20.000000> speed <30.000000>;
		turn Clamps2 to z-axis <-20.000000> speed <30.000000>;
		turn ClampBeam to x-axis <-20.000000> speed <20.000000>;
		sleep 500;
	}
	if( Static_Var_4 )
	{
		move Clamps1 to x-axis [0.000000] speed [0.800000];
		move Clamps2 to x-axis [0.000000] speed [0.800000];
		sleep 400;
	}
	if( Static_Var_4 )
	{
		turn ClampBeam to x-axis <-80.000000> speed <50.000000>;
		turn Clamps1 to z-axis <0.000000> speed <25.000000>;
		turn Clamps2 to z-axis <0.000000> speed <25.000000>;
		wait-for-turn ClampBeam around x-axis;
	}
	if( Static_Var_4 )
	{
		turn ClampBeam to x-axis <-94.000000> speed <17.000000>;
		wait-for-turn ClampBeam around x-axis;
	}
	if( Static_Var_4 )
	{
		turn ClampBeam to x-axis <-87.000000> speed <15.000000>;
		wait-for-turn ClampBeam around x-axis;
	}
	if( Static_Var_4 )
	{
		turn ClampBeam to x-axis <-90.000000> speed <8.000000>;
		wait-for-turn ClampBeam around x-axis;
		sleep 300;
	}
	if( Static_Var_4 )
	{
		move Door1 to x-axis [1.000000] speed [2.000000];
		move Door2 to x-axis [-1.000000] speed [2.000000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_4 )
	{
		move Door1 to x-axis [11.200000] speed [5.000000];
		move Door2 to x-axis [-11.200000] speed [5.000000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_4 )
	{
		move Door1 to x-axis [11.000000] speed [1.000000];
		move Door2 to x-axis [-11.000000] speed [1.000000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_4 )
	{
		turn NanoDoors2B to z-axis <50.000000> speed <90.000000>;
		turn NanoDoors1B to z-axis <-50.000000> speed <90.000000>;
		wait-for-turn NanoDoors1B around z-axis;
	}
	if( Static_Var_4 )
	{
		turn NanoDoors2A to z-axis <120.000000> speed <140.000000>;
		turn NanoDoors1A to z-axis <-120.000000> speed <140.000000>;
		wait-for-turn NanoDoors1A around z-axis;
	}
	if( Static_Var_4 )
	{
		turn NanoDoors2B to z-axis <-89.000000> speed <100.000000>;
		turn NanoDoors1B to z-axis <89.000000> speed <100.000000>;
		wait-for-turn NanoDoors2B around z-axis;
	}
	if( Static_Var_4 )
	{
		turn NanoPosts2 to z-axis <60.000000> speed <70.000000>;
		turn NanoPosts1 to z-axis <-60.000000> speed <70.000000>;
		sleep 500;
	}
	if( Static_Var_4 )
	{
		turn NanoGuns2 to z-axis <-20.000000> speed <30.000000>;
		turn NanoGuns1 to z-axis <20.000000> speed <30.000000>;
		wait-for-turn NanoGuns1 around z-axis;
		Static_Var_5 = 1;
		Static_Var_4 = 0;
		start-script Stop();
	}
	return (0);
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
	return (0);
}

Go()
{
	while( Static_Var_6 )
	{
		sleep 1000;
	}
	if( !Static_Var_5 )
	{
		if( !Static_Var_4 )
		{
			Static_Var_4 = 1;
			call-script activatescr();
		}
	}
	call-script OpenYard();
	set INBUILDSTANCE to 1;
	return (0);
}

Create()
{
	Static_Var_4 = 0;
	Static_Var_5 = 0;
	Static_Var_6 = 0;
	dont-shade ClampBeam;
	dont-shade Clamps1;
	dont-shade Clamps2;
	dont-shade Body;
	dont-shade Door1;
	dont-shade NanoDoors1A;
	dont-shade NanoDoors1B;
	dont-shade NanoPosts1;
	dont-shade NanoGuns1;
	dont-shade Door2;
	dont-shade NanoDoors2A;
	dont-shade NanoDoors2B;
	dont-shade NanoPosts2;
	dont-shade NanoGuns2;
	dont-shade NanoPad;
	start-script SmokeUnit();
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = Spray1A;
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = Spray1B;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = Spray2A;
	}
	if( Static_Var_1 == 3 )
	{
		piecenum = Spray2B;
	}
	++Static_Var_1;
	if( Static_Var_1 > 3 )
	{
		Static_Var_1 = 0;
	}
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_3 )
	{
		Static_Var_2 = requestedstate;
		return (0);
	}
	Static_Var_3 = 1;
	currentstate = Static_Var_2;
	Static_Var_2 = requestedstate;
	while( Static_Var_2 != currentstate )
	{
		if( Static_Var_2 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_2 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_3 = 0;
	return (0);
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script Go();
	return (0);
}

StartBuilding()
{
	spin NanoPad around y-axis speed <0>;
	signal SIG_ACTIVATE;
	return (0);
}

StopBuilding()
{
	stop-spin NanoPad around y-axis;
	start-script Stop();
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = NanoPad;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = Body;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode Base type BITMAPONLY | BITMAP1;
		explode Body type BITMAPONLY | BITMAP1;
		explode Door1 type BITMAPONLY | BITMAP1;
		explode NanoDoors1A type BITMAPONLY | BITMAP1;
		explode NanoDoors1B type BITMAPONLY | BITMAP1;
		explode NanoPosts1 type BITMAPONLY | BITMAP1;
		explode NanoGuns1 type BITMAPONLY | BITMAP1;
		explode Spray1A type BITMAPONLY | BITMAP1;
		explode Spray1B type BITMAPONLY | BITMAP1;
		explode Door2 type BITMAPONLY | BITMAP1;
		explode NanoDoors2A type BITMAPONLY | BITMAP1;
		explode NanoDoors2B type BITMAPONLY | BITMAP1;
		explode NanoPosts2 type BITMAPONLY | BITMAP1;
		explode NanoGuns2 type BITMAPONLY | BITMAP1;
		explode Spray2A type BITMAPONLY | BITMAP1;
		explode Spray2B type BITMAPONLY | BITMAP1;
		explode ClampBeam type BITMAPONLY | BITMAP1;
		explode Clamps1 type BITMAPONLY | BITMAP1;
		explode Clamps2 type BITMAPONLY | BITMAP1;
		explode NanoPad type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode Base type SHATTER | BITMAP4;
		explode Body type SHATTER | BITMAP4;
		explode Door1 type SHATTER | BITMAP4;
		explode NanoDoors1A type SHATTER | BITMAP4;
		explode NanoDoors1B type SHATTER | BITMAP4;
		explode NanoPosts1 type SHATTER | BITMAP4;
		explode NanoGuns1 type SHATTER | BITMAP4;
		explode Spray1A type SHATTER | BITMAP4;
		explode Spray1B type SHATTER | BITMAP4;
		explode Door2 type SHATTER | BITMAP4;
		explode NanoDoors2A type SHATTER | BITMAP4;
		explode NanoDoors2B type SHATTER | BITMAP4;
		explode NanoPosts2 type SHATTER | BITMAP4;
		explode NanoGuns2 type SHATTER | BITMAP4;
		explode Spray2A type SHATTER | BITMAP4;
		explode Spray2B type SHATTER | BITMAP4;
		explode ClampBeam type SHATTER | BITMAP4;
		explode Clamps1 type SHATTER | BITMAP4;
		explode Clamps2 type SHATTER | BITMAP4;
		explode NanoPad type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode Base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode NanoDoors1A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode NanoDoors1B type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode NanoPosts1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode NanoGuns1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Spray1A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Spray1B type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode NanoDoors2A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode NanoDoors2B type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode NanoPosts2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode NanoGuns2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Spray2A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Spray2B type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode ClampBeam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Clamps1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Clamps2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode NanoPad type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode Base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode NanoDoors1A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode NanoDoors1B type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode NanoPosts1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode NanoGuns1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Spray1A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Spray1B type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode NanoDoors2A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode NanoDoors2B type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode NanoPosts2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode NanoGuns2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Spray2A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Spray2B type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode ClampBeam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Clamps1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Clamps2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode NanoPad type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	return (0);
}
