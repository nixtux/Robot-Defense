#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pelvis, torso, lshoulder, larm, lcannon, leftfirepoint, rshoulder,
       rarm, rcannon, rightfirepoint, lupleg, llowleg, lfoot, lftoe, lbtoe1,
       rupleg, rlowleg, rfoot, rftoe, rbtoe1, plasmacannon, barrel, firepoint;

static-var  gun_1, bMoving, bAiming, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7, Static_Var_8, Static_Var_9, Static_Var_10,
            unitviewer, Static_Var_12, Static_Var_13;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 4 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from larm;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from rcannon;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	set-signal-mask 16;
	bMoving = TRUE;
	while( bMoving )
	{
		if( !Static_Var_13 )
		{
			turn rupleg to x-axis <-40.000000> speed <52.500000>;
			turn rlowleg to x-axis <0.000000> speed <26.247253>;
		}
		turn rfoot to x-axis <10.000000> speed <30.000000>;
		turn lupleg to x-axis <30.000000> speed <22.500000>;
		turn lbtoe1 to x-axis <-10.000000> speed <8.000000>;
		if( Static_Var_13 )
		{
			turn rupleg to x-axis <-40.000000> speed <27.500000>;
			turn llowleg to x-axis <20.000000> speed <15.000000>;
			Static_Var_13 = 0;
		}
		if( !Static_Var_13 )
		{
			if( !bAiming )
			{
				move torso to y-axis [1.500000] speed [2.500000];
				turn torso to z-axis <2.500000> speed <1.000000>;
				turn torso to y-axis <6.000000> speed <10.000000>;
				turn plasmacannon to y-axis <7.500000> speed <11.000000>;
				turn larm to x-axis <-22.000000> speed <14.000000>;
				turn rarm to x-axis <18.000000> speed <14.000000>;
				move plasmacannon to y-axis [2.500000] speed [1.000000];
				move torso to x-axis [0.200000] speed [0.100000];
				turn lcannon to y-axis <4.000000> speed <2.500000>;
				turn rcannon to y-axis <-4.000000> speed <2.500000>;
				move lshoulder to y-axis [0.500000] speed [1.000000];
				move rshoulder to y-axis [-0.250000] speed [0.500000];
			}
		}
		turn llowleg to x-axis <20.000000> speed <22.500000>;
		turn lftoe to x-axis <-20.000000> speed <15.000000>;
		turn lfoot to x-axis <-30.000000> speed <22.500000>;
		sleep 1250;
		if( !bAiming )
		{
			move torso to y-axis [0.000000] speed [1.000000];
			move plasmacannon to y-axis [1.500000] speed [0.800000];
			move lshoulder to y-axis [0.000000] speed [0.450000];
			move rshoulder to y-axis [0.000000] speed [0.219989];
		}
		turn rupleg to x-axis <0.000000> speed <68.000000>;
		turn rlowleg to x-axis <-10.000000> speed <17.000000>;
		turn rfoot to x-axis <0.000000> speed <51.093407>;
		turn rftoe to x-axis <0.000000> speed <91.000000>;
		turn rbtoe1 to x-axis <0.000000> speed <60.000000>;
		turn llowleg to x-axis <35.000000> speed <24.890110>;
		turn lftoe to x-axis <50.000000> speed <110.000000>;
		turn lfoot to x-axis <20.000000> speed <40.000000>;
		turn lbtoe1 to x-axis <-30.000000> speed <45.000000>;
		sleep 550;
		if( !bAiming )
		{
			move torso to y-axis [1.500000] speed [2.500000];
			turn torso to z-axis <-2.500000> speed <1.000000>;
			turn torso to y-axis <-6.000000> speed <10.000000>;
			turn plasmacannon to y-axis <-7.500000> speed <11.000000>;
			turn larm to x-axis <18.000000> speed <14.000000>;
			turn rarm to x-axis <-22.000000> speed <14.000000>;
			move plasmacannon to y-axis [2.800000] speed [1.000000];
			move torso to x-axis [-0.200000] speed [0.100000];
			turn lcannon to y-axis <-4.000000> speed <2.500000>;
			turn rcannon to y-axis <4.000000> speed <2.500000>;
			move lshoulder to y-axis [0.500000] speed [1.000000];
			move rshoulder to y-axis [-0.250000] speed [0.500000];
		}
		turn rupleg to x-axis <30.000000> speed <22.500000>;
		turn rlowleg to x-axis <20.000000> speed <22.500000>;
		turn rftoe to x-axis <-20.000000> speed <15.000000>;
		turn rfoot to x-axis <-30.000000> speed <22.500000>;
		turn rbtoe1 to x-axis <-10.000000> speed <8.000000>;
		turn lupleg to x-axis <-40.000000> speed <52.500000>;
		turn llowleg to x-axis <0.000000> speed <26.247253>;
		turn lfoot to x-axis <10.000000> speed <30.000000>;
		sleep 1250;
		if( !bAiming )
		{
			move torso to y-axis [0.000000] speed [1.000000];
			move plasmacannon to y-axis [1.500000] speed [0.800000];
			move lshoulder to y-axis [0.000000] speed [0.450000];
			move rshoulder to y-axis [0.000000] speed [0.219989];
		}
		turn lupleg to x-axis <0.000000> speed <68.000000>;
		turn llowleg to x-axis <-10.000000> speed <17.000000>;
		turn lftoe to x-axis <0.000000> speed <82.000000>;
		turn lfoot to x-axis <0.000000> speed <51.093407>;
		turn lbtoe1 to x-axis <0.000000> speed <60.000000>;
		turn rlowleg to x-axis <35.000000> speed <24.890110>;
		turn rftoe to x-axis <50.000000> speed <110.000000>;
		turn rfoot to x-axis <20.000000> speed <40.000000>;
		turn rbtoe1 to x-axis <-30.000000> speed <45.000000>;
		sleep 550;
	}
}

StopMoving()
{
	signal 16;
	bMoving = FALSE;
	Static_Var_13 = 1;
	if( !bAiming )
	{
		turn torso to y-axis <0.000000> speed <40.000000>;
	}
	if( !Static_Var_4 )
	{
		turn larm to x-axis <0.000000> speed <50.000000>;
		turn rarm to x-axis <0.000000> speed <50.000000>;
		turn lcannon to y-axis <0.000000> speed <20.000000>;
		turn rcannon to y-axis <0.000000> speed <20.000000>;
	}
	if( !Static_Var_5 )
	{
		turn plasmacannon to y-axis <0.000000> speed <20.000000>;
		move plasmacannon to y-axis [0.000000] speed [1.000000];
	}
	if( Static_Var_5 )
	{
		if( !Static_Var_12 )
		{
			move plasmacannon to y-axis [0.000000] speed [1.000000];
		}
	}
	turn lupleg to x-axis <0.000000> speed <100.000000>;
	turn llowleg to x-axis <0.000000> speed <100.000000>;
	turn lfoot to x-axis <0.000000> speed <90.000000>;
	turn lbtoe1 to x-axis <0.000000> speed <90.000000>;
	turn lftoe to x-axis <0.000000> speed <60.000000>;
	turn rupleg to x-axis <0.000000> speed <100.000000>;
	turn rlowleg to x-axis <0.000000> speed <100.000000>;
	turn rfoot to x-axis <0.000000> speed <90.000000>;
	turn rftoe to x-axis <0.000000> speed <60.000000>;
	turn rbtoe1 to x-axis <0.000000> speed <90.000000>;
	turn torso to z-axis <0.000000> speed <8.000000>;
	move torso to y-axis [0.000000] speed [4.000000];
	move torso to x-axis [0.000000] speed [1.200000];
	move lshoulder to y-axis [0.000000] speed [3.000000];
	move rshoulder to y-axis [0.000000] speed [3.000000];
}

RestorePrimary()
{
	set-signal-mask SIG_AIM;
	sleep 6000;
	Static_Var_9 = 0;
	Static_Var_10 = 0;
	turn plasmacannon to y-axis <0.000000> speed <50.000000>;
	turn torso to y-axis <0.000000> speed <50.000000>;
	turn larm to x-axis <0.000000> speed <40.000000>;
	turn rarm to x-axis <0.000000> speed <40.000000>;
	turn lcannon to y-axis <0.000000> speed <65.000000>;
	turn rcannon to y-axis <0.000000> speed <65.000000>;
	wait-for-turn torso around y-axis;
	wait-for-turn rarm around x-axis;
	wait-for-turn rcannon around y-axis;
	Static_Var_4 = 0;
	if( bAiming == 1 )
	{
		if( Static_Var_5 == 0 AND Static_Var_6 == 0 )
		{
			bAiming = FALSE;
			return (0);
		}
	}
}

RestoreSecondary()
{
	set-signal-mask SIG_AIM_2;
	sleep 6500;
	Static_Var_8 = 0;
	Static_Var_5 = 0;
	if( bAiming == 1 )
	{
		if( !Static_Var_4 AND !Static_Var_6 )
		{
			bAiming = FALSE;
		}
	}
}

Demo()
{
	unitviewer = TRUE;
}

Create()
{
	gun_1 = base;
	Static_Var_8 = 0;
	Static_Var_4 = 0;
	Static_Var_5 = 0;
	Static_Var_6 = 0;
	bMoving = FALSE;
	bAiming = FALSE;
	Static_Var_9 = 0;
	Static_Var_10 = 0;
	Static_Var_9 = 0;
	unitviewer = FALSE;
	Static_Var_12 = 0;
	Static_Var_13 = 1;
	set ARMORED to 1;
	start-script RestoreSecondary();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script SmokeUnit();
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

QueryPrimary(piecenum)
{
	if( gun_1 )
	{
		piecenum = leftfirepoint;
	}
	if( !gun_1 )
	{
		piecenum = rightfirepoint;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	Static_Var_4 = 1;
	Static_Var_9 = heading;
	Static_Var_10 = 0 - pitch;
	turn torso to y-axis heading speed <60.000000>;
	turn larm to x-axis <0.000000> - pitch speed <50.000000>;
	turn rarm to x-axis <0.000000> - pitch speed <50.000000>;
	Static_Var_10 = 0 - pitch;
	if( Static_Var_10 <= -32768 )
	{
		turn rcannon to y-axis Static_Var_10 speed <55.000000>;
		turn lcannon to y-axis <0.000000> - Static_Var_10 speed <55.000000>;
	}
	if( Static_Var_10 > -32768 )
	{
		turn rcannon to y-axis <0.000000> speed <55.000000>;
		turn lcannon to y-axis <0.000000> speed <55.000000>;
	}
	wait-for-turn torso around y-axis;
	wait-for-turn lshoulder around x-axis;
	wait-for-turn rshoulder around x-axis;
	wait-for-turn rcannon around x-axis;
	wait-for-turn lcannon around x-axis;
	start-script RestorePrimary();
	return (1);
}

FirePrimary()
{
	if( gun_1 )
	{
	//	move leftfirepoint to z-axis [-4.500000] speed [300.000000];
		sleep 150;
	//	move leftfirepoint to z-axis [0.000000] speed [3.500000];
	}
	if( !gun_1 )
	{
	//	move rightfirepoint to z-axis [-4.500000] speed [300.000000];
		sleep 150;
	//	move rightfirepoint to z-axis [0.000000] speed [3.500000];
	}
	gun_1 = !gun_1;
}

QuerySecondary(piecenum)
{
	piecenum = firepoint;
}

AimFromSecondary(piecenum)
{
	piecenum = plasmacannon;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	Static_Var_5 = 1;
	bAiming = TRUE;
	if( Static_Var_8 == 0 )
	{
		if( !bMoving )
		{
			move plasmacannon to y-axis [1.000000] speed [2.000000];
			wait-for-move plasmacannon along y-axis;
		}
		if( bMoving )
		{
			move plasmacannon to y-axis [2.800000] speed [2.000000];
			wait-for-move plasmacannon along y-axis;
		}
	}
	if( !bMoving )
	{
		move plasmacannon to y-axis [1.000000] speed [2.000000];
	}
	if( bMoving )
	{
		move plasmacannon to y-axis [2.800000] speed [2.000000];
	}
	turn plasmacannon to y-axis heading speed <30.000000>;
	wait-for-turn plasmacannon around y-axis;
	start-script RestoreSecondary();
	return (1);
}

FireSecondary()
{
	explode firepoint type BITMAPONLY | BITMAP5;
	move barrel to z-axis [-10.700000] speed [20.000000];
	sleep 500;
	move barrel to z-axis [0.000000] speed [1.200000];
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode pelvis type BITMAPONLY | BITMAP1;
		explode rcannon type SHATTER | BITMAP4;
		explode lshoulder type SHATTER | BITMAP4;
		explode rarm type SHATTER | BITMAP4;
		explode torso type BITMAPONLY | BITMAP1;
		explode plasmacannon type BITMAPONLY | BITMAP1;
		explode larm type BITMAPONLY | BITMAP1;
		explode lcannon type BITMAPONLY | BITMAP1;
		explode rshoulder type BITMAPONLY | BITMAP1;
		explode lupleg type BITMAPONLY | BITMAP1;
		explode llowleg type BITMAPONLY | BITMAP1;
		explode lfoot type BITMAPONLY | BITMAP1;
		explode lftoe type BITMAPONLY | BITMAP1;
		explode rupleg type BITMAPONLY | BITMAP1;
		explode rlowleg type BITMAPONLY | BITMAP1;
		explode rfoot type BITMAPONLY | BITMAP1;
		explode rftoe type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP4;
		explode pelvis type SHATTER | BITMAP4;
		explode torso type SHATTER | BITMAP4;
		explode plasmacannon type SHATTER | BITMAP4;
		explode larm type SHATTER | BITMAP4;
		explode lcannon type SHATTER | BITMAP4;
		explode rshoulder type SHATTER | BITMAP4;
		explode rcannon type SHATTER | BITMAP4;
		explode lshoulder type SHATTER | BITMAP4;
		explode rarm type SHATTER | BITMAP4;
		explode lupleg type SHATTER | BITMAP4;
		explode llowleg type SHATTER | BITMAP4;
		explode lfoot type SHATTER | BITMAP4;
		explode lftoe type SHATTER | BITMAP4;
		explode rupleg type SHATTER | BITMAP4;
		explode rlowleg type SHATTER | BITMAP4;
		explode rfoot type SHATTER | BITMAP4;
		explode rftoe type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | BITMAP4;
		explode pelvis type SHATTER | BITMAP4;
		explode torso type SHATTER | BITMAP4;
		explode plasmacannon type SHATTER | BITMAP4;
		explode larm type SHATTER | BITMAP4;
		explode lcannon type SHATTER | BITMAP4;
		explode rshoulder type SHATTER | BITMAP4;
		explode rcannon type SHATTER | BITMAP4;
		explode lshoulder type SHATTER | BITMAP4;
		explode rarm type SHATTER | BITMAP4;
		explode lupleg type SHATTER | BITMAP4;
		explode llowleg type SHATTER | BITMAP4;
		explode lfoot type SHATTER | BITMAP4;
		explode lftoe type SHATTER | BITMAP4;
		explode rupleg type SHATTER | BITMAP4;
		explode rlowleg type SHATTER | BITMAP4;
		explode rfoot type SHATTER | BITMAP4;
		explode rftoe type SHATTER | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode torso type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode plasmacannon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lshoulder type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode larm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lcannon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rshoulder type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rcannon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lupleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode llowleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lftoe type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rupleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rlowleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rftoe type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
