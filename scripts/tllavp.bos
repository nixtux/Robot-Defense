#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, t1, pad, nano1, spray1, rdoor, ldoor,
       t2, spray2, nano2;

static-var  spray, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from pad;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
	return (0);
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
	return (0);
}

activatescr()
{
	dont-cache pad;
	dont-cache nano1;
	dont-cache t1;
	dont-cache nano2;
	dont-cache t2;
	dont-cache rdoor;
	dont-cache ldoor;
	if( TRUE )
	{
		turn nano1 to x-axis <10.000000> speed <25.000000>;
		turn nano2 to x-axis <10.000000> speed <25.000000>;
	}
	if( TRUE )
	{
		sleep 2000;
		turn rdoor to z-axis <90.000000> speed <25.000000>;
		turn ldoor to z-axis <-90.000000> speed <25.000000>;
	}
	if( TRUE )
	{
		turn t1 to y-axis <25.000000> speed <15.000000>;
		turn t2 to y-axis <-25.000000> speed <15.000000>;
		sleep 2000;
		turn nano1 to x-axis <80.000000> speed <25.000000>;
		turn nano2 to x-axis <80.000000> speed <25.000000>;
		wait-for-turn nano2 around x-axis;
	}
	sleep 100;
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
		turn nano1 to x-axis <25.000000> speed <15.000000>;
		turn nano2 to x-axis <25.000000> speed <15.000000>;
		sleep 2300;
		turn t1 to y-axis <0.000000> speed <15.000000>;
		turn t2 to y-axis <0.000000> speed <15.000000>;
	}
	if( TRUE )
	{
		turn rdoor to z-axis <0.000000> speed <25.000000>;
		turn ldoor to z-axis <0.000000> speed <25.000000>;
		wait-for-turn rdoor around z-axis;
	}
	if( TRUE )
	{
		turn nano1 to x-axis <90.000000> speed <25.000000>;
		turn nano2 to x-axis <90.000000> speed <25.000000>;
	}
	cache pad;
	cache nano1;
	cache t1;
	cache nano2;
	cache t2;
	cache rdoor;
	cache ldoor;
	return (0);
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	dont-shade pad;
	dont-shade nano1;
	dont-shade t1;
	dont-shade nano2;
	dont-shade t2;
	dont-shade rdoor;
	dont-shade ldoor;
	spray = base;
	turn nano1 to x-axis <90.000000> now;
	turn nano2 to x-axis <90.000000> now;
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = spray1;
	if( spray == 0 )
	{
		piecenum = spray2;
	}
	spray = !spray;
	return (0);
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	sleep 5000;
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

StartBuilding()
{
}

StopBuilding()
{
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = pad;
	return (0);
}

Killed(severity, corpsetype)
{
	explode rdoor type BITMAPONLY | BITMAP4;
	explode ldoor type BITMAPONLY | BITMAP4;
	explode body type BITMAPONLY | BITMAP4;
	explode nano1 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (0);
	}
	explode nano1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode rdoor type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (0);
	}
	corpsetype = 3;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	return (0);
}
