piece base,body,turret,launcher,flare3,flare4,wake1,wake2,wake3,l1,l2;
piece flare1a,flare2a,flare1b,flare2b,flare1c,flare2c,door1,door2;

static-var ready,gun_0,fire2,restore_delay;

#define SIG_AIM1	2
#define SIG_AIM2	4
#define	SIG_WAKE	8
#define SMOKEPIECE1 launcher
#define SMOKEPIECE2 base
#define SMOKEPIECE3 flare1a
#define ANIM_VARIABLE TRUE

#include "StateChg.h"
#include "smokeunit.h"

Go()
{ 
  set ARMORED to 0;
  move door1 to z-axis [-15] speed [10];
  move door2 to z-axis [-15] speed [10];
  wait-for-move door2 along z-axis;
  move l1 to y-axis [2] speed [5];
  move l2 to y-axis [2] speed [5];
  wait-for-move l2 along y-axis;
  ready = TRUE;
 }

Stop()
{ ready = FALSE;
  sleep 1500;
  move l1 to y-axis [0] speed [5];
  move l2 to y-axis [0] speed [5];
  wait-for-move l2 along y-axis;
  move door1 to z-axis [0] speed [5];
  move door2 to z-axis [0] speed [5];
 }

#define ACTIVATECMD call-script Go();
#define DEACTIVATECMD call-script Stop();
#include "StateChg.h"	// Second time (of two)

Create()
{ 
  
  hide flare1a;
  hide flare2a;
  hide flare1b;
  hide flare2b;
  hide flare1c;
  hide flare2c;

  ready = FALSE;
  gun_0=0;
  fire2 = 0;

  restore_delay=3000;
  call-script InitState();
  start-script SmokeUnit();
 }

SetMaxReloadTime(time)
{ restore_delay = time * 2;
 }

RestoreAfterDelay2()
{ sleep restore_delay;
  set-signal-mask 0;
  turn launcher to x-axis (0) speed <70>;
  turn turret to y-axis (0) speed <30>;
 }
RestoreAfterDelay()
{ sleep restore_delay;
  set-signal-mask 0;
  start-script RequestState( INACTIVE );
 }

StartMoving()
{ signal SIG_WAKE;
  set-signal-mask SIG_WAKE;
  while (TRUE)
   { emit-sfx SFXTYPE_WAKE1 from wake1;
     emit-sfx SFXTYPE_WAKE1 from wake2;
     emit-sfx SFXTYPE_WAKE1 from wake3;
     sleep 300;
    }
 }

StopMoving()
{ signal SIG_WAKE;
 }

AimPrimary(heading,pitch)
{ start-script RequestState( ACTIVE );
  signal SIG_AIM1;
  set-signal-mask SIG_AIM1;
  while (!ready)
   { sleep 250;	}
start-script RestoreAfterDelay();
  return(TRUE);
 }

AimSecondary(heading,pitch)
{ signal SIG_AIM2;
  set-signal-mask SIG_AIM2;
  turn turret to y-axis heading speed <160>;
  turn launcher to x-axis (0-pitch) speed <80>;
  wait-for-turn turret around y-axis;
  wait-for-turn launcher around x-axis;
  start-script RestoreAfterDelay2();
  return(TRUE);
 }

FirePrimary()
{ 
 gun_0 = gun_0+1;
if (gun_0 >=5) {gun_0=1;}
 }

FireSecondary()
{ fire2 = !fire2;
 }

AimFromPrimary(piecenum)
{ piecenum = l1;
 }

AimFromSecondary(piecenum)
{ piecenum = launcher;
 }

QueryPrimary(piecenum)
{ 
  if (gun_0==0) { piecenum=flare1a; }
  if (gun_0==1) { piecenum=flare2a; }
  if (gun_0==2) { piecenum=flare1b; }
  if (gun_0==3) { piecenum=flare2b; }
  if (gun_0==4) { piecenum=flare1c; }
  if (gun_0==5) { piecenum=flare2c; }
 }

QuerySecondary(piecenum)
{ if (fire2==0) { piecenum=flare3; }
  if (fire2==1) { piecenum=flare4; }
 }

SweetSpot(piecenum)
{ piecenum=base;
 }

Killed( severity, corpsetype )
{ explode base type BITMAPONLY | BITMAP1;
  explode door1 type BITMAPONLY | BITMAP2;
  explode door2 type BITMAPONLY | BITMAP3;
  explode flare1a type BITMAPONLY | BITMAP4;
  explode flare4 type BITMAPONLY | BITMAP5;
  explode wake1 type BITMAPONLY | BITMAP3;
  explode wake2 type BITMAPONLY | BITMAP4;
  if (severity <= 25)
   { corpsetype = 1; return( 0 ); }
  explode l1 type FALL | EXPLODE_ON_HIT | BITMAP4;
  explode door2 type FALL | EXPLODE_ON_HIT | BITMAP5;
  explode door1 type FALL | EXPLODE_ON_HIT | BITMAP5;
  explode launcher type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP5;
  explode turret type SHATTER | BITMAP2;
  if (severity <= 50)
   { corpsetype = 2; return( 0 ); }
  corpsetype = 3;
  explode l1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
  explode l2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
  explode door1 type FALL | EXPLODE_ON_HIT | BITMAP5;
 }
