#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"
#include "StateChg.h"

piece  base, leg1, leg2, leg3, leg4, turret, body, rdoor, ldoor, rnano, rspray, lspray, lnano;

static-var  bMoving, spray, restore_delay,bAiming,buildheading,bCanaim;

// Signal definitions
#define SIG_AIM				2

#define SMOKEPIECE1 base


walk()
{
	while( bMoving )
	{
		if( bMoving )
		{
			turn leg1 to y-axis <45.0> speed <40.0>;
			turn leg1 to z-axis <10.0> speed <40.0>;
			turn leg2 to z-axis <10.0> speed <40.0>;
			turn leg3 to y-axis <-60.0> speed <40.0>;
			turn leg3 to z-axis <-10.0> speed <40.0>;
			turn leg4 to y-axis <0.0> speed <40.0>;
			turn leg4 to z-axis <0.0> speed <40.0>;
			turn body to x-axis <5> speed <10>;
			turn body to z-axis <5> speed <10>;
			sleep 300;
		}
		if( bMoving )
		{
			turn leg1 to z-axis <0.0> speed <40.0>;
			turn leg2 to y-axis <54.0> speed <40.0>;
			turn leg2 to z-axis <51.0> speed <40.0>;
			turn leg3 to y-axis <0.0> speed <40.0>;
			turn leg3 to z-axis <0.0> speed <40.0>;
			turn leg4 to y-axis <0.0> speed <40.0>;
			turn leg4 to z-axis <-10.0> speed <40.0>;
			turn body to x-axis <0> speed <10>;
			turn body to y-axis <5> speed <10>;
			sleep 300;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <0.0> speed <40.0>;
			turn leg1 to z-axis <10.0> speed <40.0>;
			turn leg2 to y-axis <54.0> speed <40.0>;
			turn leg2 to z-axis <0.0> speed <40.0>;
			turn leg3 to y-axis <0.0> speed <40.0>;
			turn leg3 to z-axis <-10.0> speed <40.0>;
			turn leg4 to y-axis <-51.0> speed <40.0>;
			turn leg4 to z-axis <-10.0> speed <40.0>;
			turn body to x-axis <-5> speed <10>;
			turn body to z-axis <-5> speed <10>;
			sleep 300;
		}
		turn leg1 to y-axis <-10.0> speed <40.0>;
		turn leg1 to z-axis <0.0> speed <40.0>;
		turn leg2 to y-axis <0.0> speed <40.0>;
		turn leg2 to z-axis <0.0> speed <40.0>;
		turn leg3 to y-axis <-60.0> speed <40.0>;
		turn leg3 to z-axis <-11.0> speed <40.0>;
		turn leg4 to y-axis <-57.0> speed <40.0>;
		turn leg4 to z-axis <0.0> speed <40.0>;
		turn body to x-axis <0> speed <10>;
		turn body to y-axis <-5> speed <10>;
		sleep 300;
	}
}

#include "SmokeUnit.h"

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			call-script walk();
		}
		if( !Func_Var_1 )
		{
			sleep 100;
			turn leg1 to y-axis <0.0> speed <100.0>;
			turn leg1 to z-axis <0.0> speed <100.0>;
			turn leg2 to y-axis <0.0> speed <100.0>;
			turn leg2 to z-axis <0.0> speed <100.0>;
			turn leg3 to y-axis <0.0> speed <100.0>;
			turn leg3 to z-axis <0.0> speed <100.0>;
			turn leg4 to y-axis <0.0> speed <100.0>;
			turn leg4 to z-axis <0.0> speed <100.0>;
			turn body to x-axis <0> speed <10>;
			turn body to y-axis <0> speed <10>;
			turn body to z-axis <0> speed <10>;

		}
	}
}

open()
{ 
  move rdoor to x-axis [3] speed [5];
  move ldoor to x-axis [-3] speed [5];
  wait-for-move rdoor along x-axis;
  move rnano to z-axis [3] speed [5];
  move lnano to z-axis [3] speed [5];
  wait-for-move rnano along z-axis;

 }

close()
{
  move rnano to z-axis [0] speed [5];
  move lnano to z-axis [0] speed [5];
  wait-for-move rnano along z-axis;
  move rdoor to x-axis [0] speed [5];
  move ldoor to x-axis [0] speed [5];
}


Go()
{ bAiming = TRUE;
  call-script open();
  turn turret to y-axis buildheading speed <160>;
  wait-for-turn turret around y-axis;
  set INBUILDSTANCE to TRUE;

 }

Stop()
{ set INBUILDSTANCE to FALSE;
  turn turret to y-axis <0> speed <160>;
  wait-for-turn turret around y-axis;
  call-script close();
  bAiming = FALSE;
 }

#define ACTIVATECMD call-script Go();
#define DEACTIVATECMD call-script Stop();
#include "StateChg.h"

Create()
{ bMoving = FALSE;
  bAiming = FALSE;
  bCanAim = TRUE;
  spray = 0;
  buildheading = <0>;
  call-script InitState();
  start-script SmokeUnit();
  start-script MotionControl();
 }

Activate()
{ start-script RequestState( ACTIVE );
 }

Deactivate()
{ start-script RequestState( INACTIVE );
 }

StartBuilding(heading)
{ buildheading = heading;
  start-script RequestState( ACTIVE );
 }

StopBuilding()
{ start-script RequestState( INACTIVE );
 }

StartMoving()
{ bMoving = TRUE;
 }

StopMoving()
{ bMoving = FALSE;
 }

QueryNanoPiece(piecenum)
{ 
	if( spray == 0 )
	{
		piecenum = rspray;
	}
	if( spray != 0 )
	{
		piecenum = lspray;
	}
	spray = !spray;
 }

TargetHeading( heading )
{ buildheading = 0 - heading;
 }

SweetSpot(piecenum)
{ piecenum=turret;
 }



Killed(severity, corpsetype)
{

	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode leg1 type BITMAPONLY | BITMAP2;
		explode leg2 type BITMAPONLY | BITMAP3;
		explode leg3 type BITMAPONLY | BITMAP4;
		explode leg4 type BITMAPONLY | BITMAP5;
		explode turret type BITMAPONLY | BITMAP1;
		explode rdoor type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode leg1 type FALL | BITMAP2;
		explode leg2 type FALL | BITMAP3;
		explode leg3 type FALL | BITMAP4;
		explode leg4 type FALL | BITMAP5;
		explode turret type SHATTER | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode turret type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode turret type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
