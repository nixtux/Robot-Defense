#define TA
// Advanced Solar/Wind Generator 

piece base, body, doors ,door1 ,door2 ,door3 ,door4, tower ,dish1, dish2, dish3, dish4, dish5, dish6, disha, dishb, dishc;
piece d1, d2, d3, d4, d5, d6;
#define SMOKEPIECE1 base
#define EXPLODEPIECE1 door1
#define EXPLODEPIECE2 dish1
#define EXPLODEPIECE3 door2


#include "StateChg.h"
#include "explodepartwindsolar.h"
#include "exptype.h"

Go()
	{
	SET ARMORED to FALSE;

	dont-cache door1;
	dont-cache door2;
	dont-cache door3;
	dont-cache door4;
	sleep 100;

	MOVE door1 to z-axis [-6] SPEED [17];
	MOVE door1 to x-axis [-6] SPEED [17];
	MOVE door2 to z-axis [6] SPEED [17];
	MOVE door2 to x-axis [-6] SPEED [17];
	MOVE door3 to z-axis [6] SPEED [17];
	MOVE door3 to x-axis [6] SPEED [17];
	MOVE door4 to z-axis [-6] SPEED [17];
	MOVE door4 to x-axis [6] SPEED [17];


	MOVE tower to y-axis [0] SPEED [28];

	WAIT-FOR-MOVE tower along y-axis;

	TURN dish1 to y-axis <0> speed <95>;
	TURN dish2 to y-axis <0> speed <95>;
	TURN dish3 to y-axis <0> speed <95>;
	TURN dish4 to y-axis <0> speed <95>;
	TURN dish5 to y-axis <0> speed <95>;
	TURN dish6 to y-axis <0> speed <95>;

	sleep 100;

	turn d1 to x-axis <-60> speed <95>;
	turn d2 to x-axis <60> speed <95>;
	turn d3 to x-axis <-60> speed <95>;
	turn d4 to x-axis <60> speed <95>;
	turn d5 to x-axis <-60> speed <95>;
	turn d6 to x-axis <60> speed <95>;

	sleep 100;
	}

Stop()
	{
	sleep 100;

	TURN d1 to x-axis <0> speed <85>;
	TURN d2 to x-axis <0> speed <85>;
	TURN d3 to x-axis <0> speed <85>;
	TURN d4 to x-axis <0> speed <85>;
	TURN d5 to x-axis <0> speed <85>;
	TURN d6 to x-axis <0> speed <85>;

	sleep 100;

	turn dish1 to y-axis <-90> speed <85>;
	turn dish2 to y-axis <-90> speed <85>;
	turn dish3 to y-axis <-90> speed <85>;
	turn dish4 to y-axis <-90> speed <85>;
	turn dish5 to y-axis <-90> speed <85>;
	turn dish6 to y-axis <-90> speed <85>;

	wait-for-turn d1 around x-axis;

	MOVE tower to y-axis [-35] SPEED [30];
	
	WAIT-FOR-MOVE tower along y-axis;

	MOVE door1 to z-axis [0] SPEED [20];
	MOVE door1 to x-axis [0] SPEED [20];
	MOVE door2 to z-axis [0] SPEED [20];
	MOVE door2 to x-axis [0] SPEED [20];
	MOVE door3 to z-axis [0] SPEED [20];
	MOVE door3 to x-axis [0] SPEED [20];
	MOVE door4 to z-axis [0] SPEED [20];
	MOVE door4 to x-axis [0] SPEED [20];

	WAIT-FOR-MOVE door4 along z-axis;	
	WAIT-FOR-MOVE door4 along x-axis;	

	set ARMORED to TRUE;

	sleep 500;
	cache door1;
	cache door2;
	cache door3;
	cache door4;
	}

#define ACTIVATECMD call-script Go();
#define DEACTIVATECMD call-script Stop();
#include "StateChg.h"

Create()
	{	

	dont-cache tower;
	dont-cache dish1;
	dont-cache dish2;
	dont-cache dish3;
	dont-cache dish4;
	dont-cache dish5;
	dont-cache dish6;
	dont-cache doors;

	dont-shade tower;
	dont-shade dish1;
	dont-shade dish2;
	dont-shade dish3;
	dont-shade dish4;
	dont-shade dish5;
	dont-shade dish6;
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;

	MOVE tower to y-axis [-31] NOW;
	TURN body to y-axis <25> NOW;
	TURN dishb to y-axis <120> NOW;
	TURN dishc to y-axis <240> NOW;

	TURN dish1 to y-axis <90> NOW;
	TURN dish2 to y-axis <90> NOW;
	TURN dish3 to y-axis <90> NOW;
	TURN dish4 to y-axis <90> NOW;
	TURN dish5 to y-axis <90> NOW;
	TURN dish6 to y-axis <90> NOW;


	call-script InitState();
	start-script SmokeUnit();
	}

Activate()
	{
	start-script RequestState( ACTIVE );
	}

Deactivate()
	{
	start-script RequestState( INACTIVE );
	}

SweetSpot(piecenum)
	{
	piecenum=body;
	}

Killed( severity, corpsetype )
	{
	if (severity <= 25)
		{
		corpsetype = 1;
		explode body type	BITMAPONLY | BITMAP1;
		explode door1 type	BITMAPONLY | BITMAP2;
		explode tower type	BITMAPONLY | BITMAP3;
		}

	if (severity <= 50)
		{
		corpsetype = 2;
		explode body type	BITMAPONLY | BITMAP1;
		explode tower type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door2 type	BITMAPONLY | BITMAP3;
		return( 0 );
		}

	if (severity <= 99)
		{
		corpsetype = 3;
		explode body type	BITMAPONLY | BITMAP1;
		explode tower type	SHATTER | BITMAP2;
		explode door3 type	BITMAPONLY | BITMAP3;
		return( 0 );
		}

	corpsetype = 3;
	explode body type	BITMAPONLY | BITMAP1;
	explode tower type	SHATTER | BITMAP2;
	explode door3 type	BITMAPONLY | BITMAP3;
	return( 0 );
	}
