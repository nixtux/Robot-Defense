#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, arm1, arm2, nanos, spray1, spray2;

static-var  spray, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
	return (0);
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
	return (0);
}

activatescr()
{
	turn arm1 to z-axis <40.000000> speed <20.000000>;
	turn arm2 to z-axis <-70.000000> speed <36.000000>;
	turn nanos to z-axis <35.000000> speed <21.000000>;
	wait-for-turn nanos around z-axis;
	return (0);
}

deactivatescr()
{
	turn arm1 to z-axis <0.000000> speed <20.000000>;
	turn arm2 to z-axis <0.000000> speed <29.000000>;
	turn nanos to z-axis <0.000000> speed <25.000000>;
	wait-for-turn nanos around z-axis;
	return (0);
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	dont-cache body;
	dont-shade arm1;
	dont-shade nanos;
	dont-shade arm2;
	spray = base;
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = spray1;
	if( spray == 0 )
	{
		piecenum = spray2;
	}
	spray = !spray;
	return (0);
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	sleep 3500;
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

StartBuilding()
{
}

StopBuilding()
{
}

QueryBuildInfo(piecenum)
{
	piecenum = body;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = body;
	return (0);
}

Killed(severity, corpsetype)
{
	explode body type BITMAPONLY | BITMAP4;
	explode arm1 type BITMAPONLY | BITMAP4;
	explode nanos type BITMAPONLY | BITMAP4;
	explode arm2 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (0);
	}
	explode nanos type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode arm1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (0);
	}
	corpsetype = 3;
	explode arm1 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode nanos type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode arm2 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	return (0);
}
