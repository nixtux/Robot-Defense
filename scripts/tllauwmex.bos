#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, rotor, wake1, wake2, wake3, wake4, body, top, door1, door2, door3, door4, plaque;

static-var  spinspeed,spinacc,spindec;

// Signal definitions
#define SIG_ACTIVATE			2

#include "StateChg.h"

activatescr()
{
	if( TRUE )
	{
	turn top to y-axis <45> speed <50>;
	move top to y-axis [4] speed [5];
	sleep 1100;
	}
	if( TRUE )
	{
	turn door1 to z-axis <75> speed <30>;
	turn door2 to z-axis <-75> speed <30>;
	turn door3 to x-axis <-75> speed <30>;
	turn door4 to x-axis <75> speed <30>;
	}
SLEEP 80;
}

deactivatescr()
{
	if( TRUE )
	{
	turn door1 to z-axis <0> speed <40>;
	turn door2 to z-axis <0> speed <40>;
	turn door3 to x-axis <0> speed <40>;
	turn door4 to x-axis <0> speed <40>;
	sleep 2000;
	}
	if( TRUE )
	{
	turn top to y-axis <0> speed <50>;
	move top to y-axis [0] speed [5];
	}
	sleep 47;
}

Go()
{
	dont-cache rotor;
	dont-cache top;
	call-script activatescr();
	sleep 1000;
	spin rotor around y-axis speed spinspeed accelerate spinacc;
}

Stop()
{
	call-script deactivatescr();
	Sleep 1000;

	cache top;
	stop-spin rotor around y-axis decelerate spindec;
}
#define ACTIVATECMD		call-script Go();
#define DEACTIVATECMD		call-script Stop();
#include "StateChg.h"

Create()
{
	turn body to y-axis <45> NOW;
	spinspeed = 0;
	spinacc = 91;
	spindec = 182;
	dont-shade rotor;
	dont-cache door1;
	dont-cache door2;
	dont-cache door3;
	dont-cache door4;
	call-script InitState();
}

Activate()
{
	start-script RequestState(0);
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	while( TRUE )
	{
		emit-sfx 256 | 3 from wake1;
		emit-sfx 256 | 3 from wake2;
		emit-sfx 256 | 3 from wake3;
		emit-sfx 256 | 3 from wake4;
		sleep 250;
	}
}

Deactivate()
{
	start-script RequestState(1);
	signal SIG_ACTIVATE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

SetSpeed(Func_Var_1)
{
	spinspeed = Func_Var_1 * 45;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode rotor type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode door1 type BITMAP1;
		explode door2 type BITMAP3;
		explode door4 type BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode rotor type SHATTER | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode door1 type FALL | SMOKE | BITMAP1;
		explode door2 type FALL | SMOKE | BITMAP3;
		explode door4 type FALL | SMOKE | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode rotor type BITMAPONLY | BITMAP2;
		explode door1 type FALL | SMOKE | BITMAP1;
		explode door2 type FALL | SMOKE | BITMAP3;
		explode door4 type FALL | SMOKE | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode rotor type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode door1 type FALL | SMOKE | BITMAP1;
	explode door2 type FALL | SMOKE | BITMAP3;
	explode door4 type FALL | SMOKE | BITMAP4;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP2;
}
