

piece base, body, engine, rotor, door1, door2, door3, lights;

#define SMOKEPIECE1 base

#include "StateChg.h"
#include "smokeunit.h"
#include "exptype.h"

static-var statechg_DesiredState, statechg_StateChanging;

Go()
	{
	dont-cache engine;
	dont-cache lights;
	dont-cache rotor;
	
	SET ARMORED to FALSE;

	turn door3 to y-axis <180> speed <600>;
	wait-for-turn door3 around y-axis;
	move door3 to y-axis [-7] speed [15];
	wait-for-move door3 along y-axis;
	hide door3;	

	turn door2 to y-axis <-180> speed <600>;
	wait-for-turn door2 around y-axis;
	move door2 to y-axis [-7] speed [15];
	wait-for-move door2 along y-axis;
	hide door2;	

	turn door1 to y-axis <180> speed <600>;
	wait-for-turn door1 around y-axis;
	move door1 to y-axis [-7] speed [15];
	wait-for-move door1 along y-axis;
	hide door1;

	show engine;
	show rotor;
	move engine to y-axis [0] speed [5];
	wait-for-move engine along y-axis;

	spin rotor around y-axis speed <240>;
	}

Stop()
	{
	move engine to y-axis [-5] speed [10];
	stop-spin rotor around y-axis;

	move engine to y-axis [-5] speed [10];
	wait-for-move engine along y-axis;

	hide engine;
	hide rotor;

	show door1;
	move door1 to y-axis [0] speed [15];
	wait-for-move door1 along y-axis;
	turn door1 to y-axis <0> speed <600>;
	wait-for-turn door1 around y-axis;
	
	show door2;
	move door2 to y-axis [0] speed [15];
	wait-for-move door2 along y-axis;
	turn door2 to y-axis <0> speed <600>;
	wait-for-turn door2 around y-axis;

	show door3;
	move door3 to y-axis [0] speed [15];
	wait-for-move door3 along y-axis;
	turn door3 to y-axis <0> speed <600>;
	wait-for-turn door3 around y-axis;


	SET ARMORED to TRUE;

	cache engine;
	cache rotor;
	cache lights;
	}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

#define ACTIVATECMD call-script Go();
#define DEACTIVATECMD call-script Stop();
#include "StateChg.h"

Create()
	{

	move engine to y-axis [-5] now;
	hide engine;
	hide rotor;

	dont-shade body;
	dont-shade engine;
	dont-shade lights;
	dont-cache door1;
	dont-cache door2;
	dont-cache door3;


	 while (get BUILD_PERCENT_LEFT)
    		{
		sleep 500; 
		}
	call-script InitState();
	start-script SmokeUnit();
	}

Activate()
	{
	start-script RequestState(0);
	}

Deactivate()
	{
	start-script RequestState(1);
	}

SweetSpot(piecenum)
	{
	piecenum=base;
	}

Killed( severity, corpsetype )
	{
	if (severity <= 25)
		{
		corpsetype = 1;
		explode body type	BITMAPONLY | BITMAP1;
		explode engine type	BITMAPONLY | BITMAP2;
		return( 0 );
		}

	if (severity <= 50)
		{
		corpsetype = 2;
		explode body type	BITMAPONLY | BITMAP1;
		explode engine type	SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode door1 type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode door2 type	SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode door3 type	SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode rotor type	SHATTER | EXPLODE_ON_HIT | BITMAP4;
		return( 0 );
		}

	if (severity <= 99)
		{
		corpsetype = 3;
		explode body type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode engine type	BITMAPONLY | BITMAP2;
		return( 0 );
		}

	corpsetype = 3;
	explode body type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode engine type	SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode door2 type	SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode door3 type	SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode rotor type	SHATTER | EXPLODE_ON_HIT | BITMAP4;
	return( 0 );
	}
