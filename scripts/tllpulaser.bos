#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, door1, door2, sleeve, barrel1, barrel2, flare1, flare2;

static-var  running_0, restore_delay, gun_0, position;

// Signal definitions
#define SIG_AIM				2

#define SMOKEPIECE1 base
#define EXPLODEPIECE1 door1

#include "StateChg.h"

activatescr()
{
	if( TRUE )
	{
	turn door1 to z-axis <90> speed <110>;
	turn door2 to z-axis <-90> speed <110>;
	sleep 750;
	move turret to y-axis [0] speed [15];
	sleep 1000;
	turn sleeve to x-axis <0> speed <60>;
	}
sleep 10;
}

deactivatescr()
{
	if( TRUE )
	{
	turn sleeve to x-axis <-90> speed <60>;
	sleep 1000;
	}
	if ( TRUE )
	{
	move turret to y-axis [-25] speed [15];
	sleep 1000;
	}
	if( TRUE )
	{
	turn door1 to z-axis <0> speed <85>;
	turn door2 to z-axis <0> speed <85>;
	}
	sleep 10;
}
#include "Explodepartsnorock.h"

Go()
{
	
	dont-cache door1;
	dont-cache door2;
	dont-cache sleeve;	
	dont-cache barrel1;
	dont-cache barrel2;
	dont-cache turret;
	if( !running_0 )
	{
		call-script activatescr();
	}
	running_0  = 1;
	set ARMORED to FALSE;
}

Stop()
{
	set ARMORED to TRUE;
	running_0  = 0;
	call-script deactivatescr();
	cache door1;
	cache door2;
	cache sleeve;
	cache barrel1;
	cache barrel2;
	cache turret;
}
#define ACTIVATECMD		call-script Go();
#define DEACTIVATECMD		call-script Stop();
#include "StateChg.h"

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	if (position == 0)
		{
		turn turret to y-axis <0> speed <200.0>;
		}
	if (position == 1)
		{
		turn turret to y-axis <180> speed <200.0>;
		} 
	wait-for-turn turret around y-axis;
	start-script RequestState(1);
}

Create()
{
	
	dont-shade door1;
	dont-shade door2;
	dont-shade sleeve;
	dont-shade barrel1;
	dont-shade barrel2;
	dont-shade turret;

	hide flare1;
	hide flare2;

	running_0  = 1;
	gun_0=1;
	position=0;

	restore_delay = 3000;
	call-script InitState();
	start-script SmokeUnit();
	start-script RequestState(0);

	turn door1 to z-axis <90> NOW;
	turn door2 to z-axis <-90> NOW;

	set-signal-mask SIG_AIM;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script RestoreAfterDelay();
}

SetMaxReloadTime(time)
{
	restore_delay = time * 2;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !running_0 )
	{
		sleep 250;
	}
	if (Heading < <270> and heading > <90> )
		{
		position = 1;
		}
	if (Heading > <270> or heading < <90> )
		{
		position = 0;
		}
	TURN turret to y-axis heading SPEED <200>;
	TURN sleeve to x-axis (0 - pitch) SPEED <150>;
	WAIT-FOR-TURN sleeve around x-axis;
	WAIT-FOR-TURN turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
if ( gun_0 ==1 )
	{
	move barrel1 to z-axis [-1.5] speed [200];
	sleep 150;
	move barrel1 to z-axis [0] speed [10];
	}
if ( gun_0 ==2 )
	{
	move barrel2 to z-axis [-1.5] speed [200];
	sleep 150;
	move barrel2 to z-axis [0] speed [10];
	}
gun_0=gun_0+1;
if ( gun_0 >=3 )
	{
	gun_0=1;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
if (gun_0==1)
	{
	piecenum = flare1;
	}
if (gun_0==2)
	{
	piecenum = flare2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		if( running_0 )
		{
			corpsetype = 1;
		}
		if( !running_0 )
		{
			corpsetype = 2;
		}
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode barrel2 type BITMAPONLY | BITMAP5;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP3;
	}
	if( severity <= 50 )
	{
		if( running_0 )
		{
			corpsetype = 2;
		}
		if( !running_0 )
		{
			corpsetype = 3;
		}
		explode body type SHATTER | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode door1 type FALL | BITMAP3;
		explode door2 type FALL | BITMAP4;
		explode barrel1 type FALL | BITMAP5;
		explode barrel2 type FALL | BITMAP1;
		explode sleeve type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		if( running_0 )
		{
			corpsetype = 3;
		}
		if( !running_0 )
		{
			corpsetype = 4;
		}
		explode body type SHATTER | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 4;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode turret type BITMAPONLY | BITMAP2;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
