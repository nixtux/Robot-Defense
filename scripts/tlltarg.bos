#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, arm, antenne, pan1, pan2, pan3, pan4, pan5, pan6, pan7, pan8, light, plate, rdoor, ldoor;

#define SMOKEPIECE1 base
#define EXPLODEPIECE1 pan5
#define EXPLODEPIECE2 antenne
#define EXPLODEPIECE3 rdoor

#include "StateChg.h"

activatescr()
{

	dont-cache rdoor;
	dont-cache ldoor;
	dont-cache plate;
	dont-cache light;
	dont-cache arm;
	dont-cache antenne;
	dont-cache pan1;
	dont-cache pan2;
	dont-cache pan3;
	dont-cache pan4;
	dont-cache pan5;
	dont-cache pan6;
	dont-cache pan7;
	dont-cache pan8;
	
	SET ARMORED to FALSE;
	if ( TRUE )
	{
	turn rdoor to z-axis <-90> speed <35>;
	turn ldoor to z-axis <90> speed <35>;
	wait-for-turn ldoor around z-axis;
	}
	if ( TRUE )
	{
	move plate to y-axis [9] speed [5];
	wait-for-move plate along y-axis;
	}

	if( TRUE )
	{
		turn arm to x-axis <-130> speed <33>;
		sleep 3000;
	}
	if( TRUE )
	{
		turn antenne to x-axis <-60> speed <45>;
		turn pan1 to y-axis <-22> speed <30>;
		sleep 350;
		turn pan2 to y-axis <-45> speed <30>;
		sleep 350;
		turn pan3 to y-axis <-45> speed <30>;
		sleep 350;
		turn pan4 to y-axis <-45> speed <30>;
		sleep 350;
		turn pan5 to y-axis <-45> speed <30>;
		sleep 350;
		turn pan6 to y-axis <-45> speed <30>;
		sleep 350;
		turn pan7 to y-axis <-45> speed <30>;
		sleep 350;
		turn pan8 to y-axis <-45> speed <30>;
		sleep 350;
	}
	sleep 53;
}

deactivatescr()
{
	if( TRUE )
	{
		turn pan8 to y-axis <0> speed <45>;
		sleep 200;
		turn pan7 to y-axis <0> speed <45>;
		sleep 200;
		turn pan6 to y-axis <0> speed <45>;
		sleep 200;
		turn pan5 to y-axis <0> speed <45>;
		sleep 200;
		turn pan4 to y-axis <0> speed <45>;
		sleep 200;
		turn pan3 to y-axis <0> speed <45>;
		sleep 200;
		turn pan2 to y-axis <0> speed <45>;
		sleep 200;
		turn pan1 to y-axis <0> speed <45>;
		sleep 200;
		turn antenne to x-axis <0> speed <45>;
		sleep 500;
	}
	if( TRUE )
	{
	turn arm to x-axis <10> speed <33>;
	wait-for-turn arm around x-axis;
	}
	if ( TRUE )
	{
	move plate to y-axis [0] speed [5];
	wait-for-move plate along y-axis;
	}

	if ( TRUE )
	{
	turn rdoor to z-axis <0> speed <35>;
	turn ldoor to z-axis <0> speed <35>;
	wait-for-turn ldoor around z-axis;
	}

	cache rdoor;
	cache ldoor;
	cache plate;
	cache light;
	cache arm;
	cache antenne;
	cache pan1;
	cache pan2;
	cache pan3;
	cache pan4;
	cache pan5;
	cache pan6;
	cache pan7;
	cache pan8;

	SET ARMORED to TRUE;
	sleep 58;
}

#define ACTIVATECMD			call-script activatescr();
#define DEACTIVATECMD		call-script deactivatescr();
#include "StateChg.h"
#include "explodepartsarad.h"

Create()
{	
	dont-shade body;
	dont-shade rdoor;
	dont-shade ldoor;
	dont-shade plate;
	dont-shade light;
	dont-shade arm;
	dont-shade antenne;
	dont-shade pan1;
	dont-shade pan2;
	dont-shade pan3;
	dont-shade pan4;
	dont-shade pan5;
	dont-shade pan6;
	dont-shade pan7;
	dont-shade pan8;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	dont-cache light;
	start-script RequestState(0);
}

Deactivate()
{
	cache light;
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode pan1 type BITMAPONLY | BITMAP3;
		explode pan2 type BITMAPONLY | BITMAP4;
		explode pan3 type BITMAPONLY | BITMAP5;
		explode pan4 type BITMAPONLY | BITMAP1;
		explode pan5 type BITMAPONLY | BITMAP2;
		explode pan6 type BITMAPONLY | BITMAP3;
		explode pan7 type BITMAPONLY | BITMAP4;
		explode pan8 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode pan1 type FALL | BITMAP2;
		explode pan2 type FALL | BITMAP3;
		explode pan3 type FALL | BITMAP4;
		explode pan4 type FALL | BITMAP5;
		explode pan5 type FALL | BITMAP1;
		explode arm type SHATTER | BITMAP2;
		explode pan6 type BITMAPONLY | BITMAP3;
		explode pan7 type BITMAPONLY | BITMAP4;
		explode pan8 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arm type BITMAPONLY | BITMAP1;
		explode pan1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode pan2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode pan3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode pan4 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode pan5 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode body type SHATTER | BITMAP2;
		explode pan6 type BITMAPONLY | BITMAP3;
		explode pan7 type BITMAPONLY | BITMAP4;
		explode pan8 type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode arm type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode pan1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode pan2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode pan3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode pan4 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode pan6 type BITMAPONLY | BITMAP3;
	explode pan7 type BITMAPONLY | BITMAP4;
	explode pan8 type BITMAPONLY | BITMAP5;
}
