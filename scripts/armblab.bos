#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, shell, panela, panelb, neck, nano, beam,
       lighta, lightb, lightc, lightd;

static-var  Static_Var_1, unitviewer, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from shell;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
	return (0);
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
	return (0);
}

activatescr()
{
	if( TRUE )
	{
		turn shell to x-axis <-90.021978> speed <80.000000>;
		sleep 800;
		turn panela to z-axis <135.032967> speed <80.000000>;
		turn panelb to z-axis <-135.032967> speed <80.000000>;
		sleep 400;
	}
	if( TRUE )
	{
		turn neck to x-axis <-135.032967> speed <100.000000>;
		sleep 500;
		turn nano to x-axis <-70.016484> speed <40.000000>;
		sleep 800;
	}
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
		turn nano to x-axis <0.000000> speed <40.000000>;
		sleep 500;
		turn neck to x-axis <0.000000> speed <90.000000>;
		sleep 500;
	}
	if( TRUE )
	{
		turn panela to z-axis <0.000000> speed <80.000000>;
		turn panelb to z-axis <0.000000> speed <80.000000>;
		sleep 1200;
		turn shell to x-axis <0.000000> speed <80.000000>;
		sleep 648;
	}
	return (0);
}

Go()
{
	dont-cache shell;
	dont-cache panela;
	dont-cache panelb;
	dont-cache neck;
	dont-cache nano;
	dont-cache beam;
	dont-cache lighta;
	dont-cache lightb;
	dont-cache lightc;
	dont-cache lightd;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache shell;
	cache panela;
	cache panelb;
	cache neck;
	cache nano;
	cache beam;
	cache lighta;
	cache lightb;
	cache lightc;
	cache lightd;
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	cache base;
	cache pad;
	cache shell;
	cache panela;
	cache panelb;
	cache neck;
	cache nano;
	cache beam;
	cache lighta;
	cache lightb;
	cache lightc;
	cache lightd;
	dont-shade neck;
	dont-shade nano;
	dont-shade beam;
	dont-shade lighta;
	dont-shade lightb;
	dont-shade lightc;
	dont-shade lightd;
	Static_Var_1 = 0;
	unitviewer = FALSE;
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
	return (0);
}

Demo()
{
	unitviewer = TRUE;
	return (0);
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

StartBuilding()
{
	spin pad around y-axis speed <0>;
	return (0);
}

StopBuilding()
{
	stop-spin pad around y-axis;
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		explode shell type BITMAPONLY | BITMAP3;
		explode panela type BITMAPONLY | BITMAP4;
		explode panelb type BITMAPONLY | BITMAP5;
		explode neck type BITMAPONLY | BITMAP1;
		explode nano type BITMAPONLY | BITMAP2;
		explode beam type BITMAPONLY | BITMAP3;
		explode lighta type BITMAPONLY | BITMAP4;
		explode lightb type BITMAPONLY | BITMAP5;
		explode lightc type BITMAPONLY | BITMAP1;
		explode lightd type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		explode shell type FALL | BITMAP3;
		explode panela type FALL | BITMAP4;
		explode panelb type FALL | BITMAP5;
		explode neck type FALL | BITMAP1;
		explode nano type BITMAPONLY | BITMAP2;
		explode beam type FALL | BITMAP3;
		explode lighta type FALL | BITMAP4;
		explode lightb type FALL | BITMAP5;
		explode lightc type FALL | BITMAP1;
		explode lightd type FALL | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		explode shell type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode panela type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode panelb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode neck type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode nano type BITMAPONLY | BITMAP2;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lighta type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lightb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lightc type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lightd type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode pad type BITMAPONLY | BITMAP2;
	explode shell type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode panela type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode panelb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode neck type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode nano type BITMAPONLY | BITMAP2;
	explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lighta type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lightb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lightc type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lightd type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	return (0);
}
