#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, pad, doors, door1, door2, door3, door4, arms, arm1, arm2, arm3, arm4, flo1, flo2, flo3, flo4, nano1, nano2,wake1,wake2,wake3,wake4;

static-var  spray, unitviewer;

// Signal definitions
#define SIG_ACTIVATE			2

#include "StateChg.h"

activatescr()
{
	if( TRUE )
	{
	move body to y-axis [12.5] speed [3];
	turn arm1 to x-axis <45> speed <13>;
	turn flo1 to x-axis <-45> speed <13>;
	turn arm2 to x-axis <-45> speed <13>;
	turn flo2 to x-axis <45> speed <13>;
	turn arm3 to z-axis <45> speed <13>;
	turn flo3 to z-axis <-45> speed <13>;
	turn arm4 to z-axis <-45> speed <13>;
	turn flo4 to z-axis <45> speed <13>;
	wait-for-move body along y-axis;
	}
	if( TRUE )
	{
	turn door1 to z-axis <-50> speed <20>;
	turn door2 to z-axis <50> speed <20>;
	turn door3 to x-axis <-50> speed <20>;
	turn door4 to x-axis <50> speed <20>;
	move doors to y-axis [-10] speed [3];
	emit-sfx 256 | 3 from door1;
	emit-sfx 256 | 3 from door2;
	emit-sfx 256 | 3 from door3;
	emit-sfx 256 | 3 from door4;
	emit-sfx 256 | 3 from wake1;
	emit-sfx 256 | 3 from wake2;
	emit-sfx 256 | 3 from wake3;
	emit-sfx 256 | 3 from wake4;
	Sleep 1250;
	emit-sfx 256 | 3 from door1;
	emit-sfx 256 | 3 from door2;
	emit-sfx 256 | 3 from door3;
	emit-sfx 256 | 3 from door4;
	emit-sfx 256 | 3 from wake1;
	emit-sfx 256 | 3 from wake2;
	emit-sfx 256 | 3 from wake3;
	emit-sfx 256 | 3 from wake4;
	Sleep 1250;
	}
	if( TRUE )
	{
	move pad to y-axis [2] speed [5];
	move nano1 to y-axis [3.2] speed [5];
	move nano2 to y-axis [3.2] speed [5];
	}
SLEEP 800;
}

deactivatescr()
{
	if( TRUE )
	{
	move pad to y-axis [0] speed [7];
	move nano1 to y-axis [0] speed [5];
	move nano2 to y-axis [0] speed [5];
	SLEEP 1000;
	}
	if( TRUE )
	{
	move doors to y-axis [0] speed [7];
	turn door1 to z-axis <0> speed <20>;
	turn door2 to z-axis <0> speed <20>;
	turn door3 to x-axis <0> speed <20>;
	turn door4 to x-axis <0> speed <20>;
	SLEEP 2500;
	}
	if( TRUE )
	{
	move body to y-axis [0] speed [3];
	turn arm1 to x-axis <0> speed <12>;
	turn flo1 to x-axis <0> speed <12>;
	turn arm2 to x-axis <0> speed <12>;
	turn flo2 to x-axis <0> speed <12>;
	turn arm3 to z-axis <0> speed <12>;
	turn flo3 to z-axis <0> speed <12>;
	turn arm4 to z-axis <0> speed <12>;
	turn flo4 to z-axis <0> speed <12>;
	emit-sfx 256 | 3 from door1;
	emit-sfx 256 | 3 from door2;
	emit-sfx 256 | 3 from door3;
	emit-sfx 256 | 3 from door4;
	emit-sfx 256 | 3 from wake1;
	emit-sfx 256 | 3 from wake2;
	emit-sfx 256 | 3 from wake3;
	emit-sfx 256 | 3 from wake4;
	Sleep 125;
	}
	sleep 47;
}

#include "Yard.h"

Go()
{
	dont-cache nano1;
	dont-cache nano2;
	dont-cache pad;
	
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache nano1;
	cache nano2;
	cache pad;
	
}
#define ACTIVATECMD		call-script Go();
#define DEACTIVATECMD		call-script Stop();
#include "StateChg.h"

Create()
{
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade pad;
	dont-shade body;
	
	turn doors to y-axis <-45> NOW;
	turn arms to y-axis <45> NOW;

	unitviewer = FALSE;
	spray = base;
	call-script InitState();
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = nano1;
	}
	if( spray != 0 )
	{
		piecenum = nano2;
	}
	spray = !spray;
}

Demo()
{
	unitviewer = TRUE;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin pad around y-axis speed <30>;
}

StopBuilding()
{
	stop-spin pad around y-axis;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode arm1 type BITMAPONLY | BITMAP2;
		explode arm2 type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nano1 type BITMAPONLY | BITMAP1;
		explode nano2 type BITMAPONLY | BITMAP2;
		explode pad type BITMAPONLY | BITMAP3;
		explode arm3 type BITMAPONLY | BITMAP4;
		explode arm4 type BITMAPONLY | BITMAP5;
		explode flo3 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode arm1 type BITMAPONLY | BITMAP2;
		explode arm2 type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nano1 type BITMAPONLY | BITMAP1;
		explode nano2 type BITMAPONLY | BITMAP2;
		explode pad type BITMAPONLY | BITMAP3;
		explode arm3 type BITMAPONLY | BITMAP4;
		explode arm4 type BITMAPONLY | BITMAP5;
		explode flo4 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type BITMAPONLY | BITMAP1;
		explode arm1 type BITMAPONLY | BITMAP2;
		explode arm2 type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nano1 type BITMAPONLY | BITMAP1;
		explode nano2 type BITMAPONLY | BITMAP2;
		explode pad type BITMAPONLY | BITMAP3;
		explode arm3 type BITMAPONLY | BITMAP4;
		explode arm4 type BITMAPONLY | BITMAP5;
		explode flo3 type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode body type BITMAPONLY | BITMAP1;
	explode arm1 type BITMAPONLY | BITMAP2;
	explode arm2 type BITMAPONLY | BITMAP3;
	explode door1 type BITMAPONLY | BITMAP4;
	explode door2 type BITMAPONLY | BITMAP5;
	explode nano1 type BITMAPONLY | BITMAP1;
	explode nano2 type BITMAPONLY | BITMAP2;
	explode pad type BITMAPONLY | BITMAP3;
	explode arm3 type BITMAPONLY | BITMAP4;
	explode arm4 type BITMAPONLY | BITMAP5;
	explode flo1 type BITMAPONLY | BITMAP1;
}
