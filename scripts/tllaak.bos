piece base,pelvis,body,rleg,lleg;
piece backholder,backbarrels,elevator,holder,barrels,lflare,rflare,ldoor,rdoor;

static-var gun,bMoving,bAiming,bCanAim,restore_delay,ready;

#define SMOKEPIECE1 holder
#define ANIM_VARIABLE TRUE
#define SIG_AIM1 2

#include "StateChg.h"
#include "smokeunit.h"
#include "exptype.h"


walk()
{
		if( TRUE )
		{
			move pelvis to y-axis [0.0] now;
			move lleg to y-axis [0.0] now;
			move lleg to z-axis [1.8] now;
			move rleg to y-axis [0.0] now;
			move rleg to z-axis [-1.6] now;
			turn pelvis to x-axis <3.0> now;
			turn lleg to x-axis <-6.0> now;
			turn rleg to x-axis <0.0> now;
			sleep 60;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.5] now;
			move lleg to y-axis [0.5] now;
			move rleg to y-axis [0.5] now;
			turn pelvis to x-axis <2> now;
			turn lleg to x-axis <-4.9> now;
			turn rleg to x-axis <1.1> now;
			sleep 30;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.3] now;
			move lleg to y-axis [0.3] now;
			move rleg to y-axis [0.3] now;
			turn pelvis to x-axis <2.1> now;
			turn lleg to x-axis <-2.1> now;
			turn rleg to x-axis <2.8> now;
			sleep 20;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.1] now;
			move lleg to y-axis [0.1] now;
			move rleg to y-axis [0.1] now;
			turn pelvis to x-axis <1.1> now;
			turn lleg to x-axis <-1.0> now;
			turn rleg to x-axis <3.2> now;
			sleep 10;
		}
		if( TRUE )
		{
			move pelvis to y-axis [0.0] now;
			move lleg to y-axis [0.0] now;
			move rleg to y-axis [1.1] now;
			move rleg to z-axis [-1.9] now;
			turn pelvis to x-axis <0.0> now;
			turn lleg to x-axis <0.0> now;
			turn rleg to x-axis <0.0> now;
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to z-axis [1.0] now;
			move rleg to z-axis [-0.3] now;
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to y-axis [0.0] now;
			move lleg to z-axis [0.0] now;
			move rleg to z-axis [0.0] now;
			turn pelvis to x-axis <0.0> now;
			turn lleg to x-axis <0.0> now;
			turn rleg to x-axis <0.0> now;
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to z-axis [-0.6] now;
			move rleg to z-axis [0.8] now;
			turn rleg to x-axis <-9.1> now;
			sleep 100;
		}
		if( TRUE )
		{
			move lleg to z-axis [-1.2] now;
			move rleg to y-axis [0.0] now;
			turn pelvis to x-axis <3> now;
			turn rleg to x-axis <-6.0> now;
			sleep 60;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.5] now;
			move lleg to y-axis [0.5] now;
			move rleg to y-axis [0.5] now;
			turn pelvis to x-axis <2> now;
			turn lleg to x-axis <0.7> now;
			turn rleg to x-axis <-4.9> now;
			sleep 30;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.3] now;
			move lleg to y-axis [0.3] now;
			move rleg to y-axis [0.3] now;
			turn pelvis to x-axis <1.1> now;
			turn lleg to x-axis <2.8> now;
			turn rleg to x-axis <-2.1> now;
			sleep 20;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.1] now;
			move lleg to y-axis [0.1] now;
			move rleg to y-axis [0.1] now;
			turn pelvis to x-axis <1> now;
			turn lleg to x-axis <2.5> now;
			turn rleg to x-axis <-1.0> now;
			sleep 10;
		}
		if( TRUE )
		{
			move lleg to y-axis [1.1] now;
			move lleg to z-axis [-1.6] now;
			move rleg to y-axis [0.1] now;
			turn pelvis to x-axis <0.0> now;
			turn lleg to x-axis <0.0> now;
			turn rleg to x-axis <0.0> now;
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to z-axis [-0.7] now;
			move rleg to z-axis [0.2] now;
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to z-axis [0.5] now;
			move rleg to y-axis [0.0] now;
			move rleg to z-axis [-0.3] now;
			turn rleg to x-axis <0.0> now;
			sleep 60;
		}
		move lleg to z-axis [1.0] now;
		move rleg to y-axis [0.0] now;
		move rleg to z-axis [-1.3] now;
		turn lleg to x-axis <-10.2> now;
		turn rleg to x-axis <0.0> now;
		sleep 100;

}

stand()
{
sleep 250; 
}

MotionControl()
{ var moving, aiming;
  while (TRUE)
   { moving = bMoving;
     aiming = bAiming;
     if (moving)
      { if (aiming)
         { bCanAim = TRUE;
   call-script walk();
  }
        if (NOT aiming)
         { bCanAim = FALSE;
   call-script walk();
  }
       }
     if (NOT moving)
      { bCanAim = TRUE;
        call-script stand();
       }
     sleep 60;
    }
 }

open()
{ show holder;
  show elevator;
  turn backholder to x-axis <90> speed <90>;
  turn ldoor to z-axis <-150> speed <90>;
  turn rdoor to z-axis <150> speed <90>;
  wait-for-turn ldoor around z-axis;
  move backbarrels to y-axis [4.25] speed [4];
  move elevator to y-axis [2.5] speed [3];
  wait-for-move elevator along y-axis;
  show barrels;
  hide backbarrels;
  turn backholder to x-axis <0> speed <90>;
 }

close()
{ turn backholder to x-axis <90> speed <90>;
  wait-for-turn backholder around x-axis;
  show backbarrels;
  hide barrels;
  move backbarrels to y-axis [0] speed [4];
  move elevator to y-axis [0] speed [2];
  wait-for-move elevator along y-axis;
  turn ldoor to z-axis <0> speed <90>;
  turn rdoor to z-axis <0> speed <90>;
  turn backholder to x-axis <0> speed <90>;
  wait-for-turn ldoor around z-axis;
  hide elevator;
  hide holder;
 }

Go()
{ bAiming = TRUE;
  set ARMORED to 0;
  call-script open();
  ready=1;
 }

Stop()
{ ready=0;
  call-script close();
  set ARMORED to 1;
  bAiming = FALSE;
 }

#define ACTIVATECMD call-script Go();
#define DEACTIVATECMD call-script Stop();
#include "StateChg.h"

Create()
{ bMoving = FALSE;
  bAiming = FALSE;
  bCanAim = TRUE;
  ready=0;
  gun=0;
  restore_delay=3000;
  hide barrels;
  hide elevator;
  hide holder;
  call-script InitState();
  start-script SmokeUnit();
  start-script MotionControl();
 }


SetMaxReloadTime(time)
{ restore_delay = time * 2;
 }

RestoreAfterDelay()
{ sleep restore_delay;
  set-signal-mask 0;
  turn holder to y-axis <0> speed <120>;
  turn barrels to x-axis <0> speed <90>;
  wait-for-turn holder around y-axis;
  wait-for-turn barrels around x-axis;
  start-script RequestState( INACTIVE );
 }

AimPrimary(heading,pitch)
{ start-script RequestState( ACTIVE );
  signal SIG_AIM1;
  set-signal-mask SIG_AIM1;
  while (!ready)
   { sleep 250;	}
  turn holder to y-axis heading speed <120>;
  turn barrels to x-axis (0-pitch) speed <90>;
  wait-for-turn holder around y-axis;
  wait-for-turn barrels around x-axis;
  start-script RestoreAfterDelay();
  return(TRUE);
 }

FirePrimary()
{ gun=1-gun;
 }

AimFromPrimary(piecenum)
{ piecenum=barrels;
 }

QueryPrimary(piecenum)
{ piecenum=lflare;
  if (gun) 
   { piecenum=rflare; }
 }

StartMoving()
{ bMoving = TRUE;
 }

StopMoving()
{ bMoving = FALSE;
 }

SweetSpot(piecenum)
{ piecenum=body;
 }

Killed( severity, corpsetype )
{ explode pelvis type BITMAPONLY | BITMAP5;
  explode lleg type BITMAPONLY | BITMAP3;
  explode rleg type BITMAPONLY | BITMAP3;
  explode backbarrels type SHATTER | EXPLODE_ON_HIT | BITMAP3;
  explode holder type SHATTER | EXPLODE_ON_HIT | BITMAP3;
  if (severity <= 25)
   { corpsetype = 1;
     return( 0 );
    }
  explode ldoor type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
  explode rdoor type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
  explode barrels type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
  if (severity <= 50)
   { corpsetype = 2;
     return( 0 );
    }
  explode body type SHATTER | EXPLODE_ON_HIT | BITMAP3;
  corpsetype = 3;
  return( 0 );
 }