piece base,body,ldoor1,ldoor2,rdoor1,rdoor2,wake1,wake2,missile1,missile2,flare1,flare2;

static-var gun;

#define SIG_WAKE 	2
#define SIG_AIM 	4

#define SMOKEPIECE1 ldoor1
#define SMOKEPIECE2 ldoor2

#include "watersmokeunit.h"

Create()
{ gun=0;
  move missile1 to y-axis [-8.4] NOW;
  move missile2 to y-axis [-8.4] NOW;
  start-script SmokeUnit();
 }

StartMoving()
{ signal SIG_WAKE;
  set-signal-mask SIG_WAKE;
  while (TRUE)
   { emit-sfx 256 | 3 from wake1;
     emit-sfx 256 | 3 from wake2;
     sleep 150; }
 }

StopMoving()
{ signal SIG_WAKE;
 }

RestoreAfterDelay()
{ set-signal-mask SIG_AIM;
  sleep 20000;
  MOVE body to y-axis [0] speed [3];
  MOVE missile1 to y-axis [-8.4] speed [5];
  MOVE missile2 to y-axis [-8.4] speed [5];
  WAIT-FOR-MOVE missile1 along y-axis;
  WAIT-FOR-MOVE missile2 along y-axis;
  TURN ldoor1 to z-axis <0> SPEED <50.00>;
  TURN rdoor1 to z-axis <0> SPEED <50.00>;
  TURN ldoor2 to z-axis <0> SPEED <50.00>;
  TURN rdoor2 to z-axis <0> SPEED <50.00>;
  emit-sfx 256 | 3 from ldoor1;
  emit-sfx 256 | 3 from rdoor1;
  emit-sfx 256 | 3 from ldoor2;
  emit-sfx 256 | 3 from rdoor2;
  WAIT-FOR-TURN ldoor1 around z-axis;
  WAIT-FOR-TURN ldoor2 around z-axis;
  emit-sfx 256 | 3 from ldoor1;
  emit-sfx 256 | 3 from rdoor1;
  emit-sfx 256 | 3 from ldoor2;
  emit-sfx 256 | 3 from rdoor2;
 }


AimPrimary()
{ signal SIG_AIM;
  set-signal-mask SIG_AIM;
  MOVE body to y-axis [6] speed [3];
 
     turn ldoor1 to z-axis <90> speed <50.00>;
     turn rdoor1 to z-axis <-90> speed <50.00>;
     turn ldoor2 to z-axis <90> speed <50.00>;
     turn rdoor2 to z-axis <-90> speed <50.00>;
     emit-sfx 256 | 3 from ldoor2;
     emit-sfx 256 | 3 from rdoor2;
     emit-sfx 256 | 3 from ldoor1;
     emit-sfx 256 | 3 from rdoor1;
     wait-for-turn ldoor2 around z-axis;
    emit-sfx 256 | 3 from ldoor2;
     emit-sfx 256 | 3 from rdoor2;
     emit-sfx 256 | 3 from ldoor1;
     emit-sfx 256 | 3 from rdoor1;

     move missile1 to y-axis [0] speed [5];
     move missile2 to y-axis [0] speed [5];
     wait-for-move missile1 along y-axis;

 
 start-script RestoreAfterDelay();
 return(TRUE);
 }

FirePrimary()
{ 
gun = !gun;
sleep 150;
 }

QueryPrimary(piecenum)
{
if (gun == 0)
	{
	piecenum=flare1;
	}
if (gun == 1)
	{
	piecenum=flare2;
	}
}

AimFromPrimary(piecenum)
{ piecenum=missile1;
 }

SweetSpot(piecenum)
{ piecenum=base;
 }

Killed( severity, corpsetype )
{ explode missile1 type BITMAPONLY | BITMAP2;
  explode missile2 type BITMAPONLY | BITMAP3;
  explode wake1 type BITMAPONLY | BITMAP4;
  explode wake2 type BITMAPONLY | BITMAP4;
  explode base type BITMAPONLY | BITMAP4;
  if (severity <= 25)
   { corpsetype = 1; return( 0 ); }
  explode ldoor1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
  explode rdoor1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
  explode ldoor2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
  explode rdoor2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
    if (severity <= 50)
   { corpsetype = 2; return( 0 ); }
  explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
  corpsetype = 3;
 }
