#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, lpiece, rpiece, pad, rdoor, ldoor, rnano,
       lnano, rspray, lspray;

static-var  spray, statechg_DesiredState, statechg_StateChanging, Static_Var_4;

// Signal definitions
#define SIG_ACTIVATE			2


HitByWeapon(Func_Var_1, Func_Var_2, Func_Var_3)
{
	Func_Var_3 = get HEALTH;
	if( Func_Var_3 <= 60 )
	{
		if( Static_Var_4 == 0 )
		{
			Static_Var_4 = 1;
			hide rdoor;
			explode rdoor type FALL | SHATTER | SMOKE | BITMAP2;
		}
	}
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	Static_Var_4 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent >= 75 )
		{
			if( Static_Var_4 == 1 )
			{
				Static_Var_4 = 0;
				show rdoor;
			}
		}
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from pad;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
	return (0);
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
	return (0);
}

activatescr()
{
	dont-cache pad;
	dont-cache rpiece;
	dont-cache lpiece;
	dont-cache rdoor;
	dont-cache ldoor;
	dont-cache rnano;
	dont-cache lnano;
	turn lpiece to z-axis <-70.000000> speed <45.000000>;
	turn rpiece to z-axis <70.000000> speed <45.000000>;
	sleep 1000;
	turn ldoor to z-axis <-100.000000> speed <45.000000>;
	turn rdoor to z-axis <100.000000> speed <45.000000>;
	wait-for-turn rdoor around z-axis;
	move lnano to x-axis [-3.000000] speed [5.000000];
	move rnano to x-axis [3.000000] speed [5.000000];
	wait-for-move rnano along x-axis;
	return (0);
}

deactivatescr()
{
	move lnano to x-axis [0.000000] speed [5.000000];
	move rnano to x-axis [0.000000] speed [5.000000];
	wait-for-move rnano along x-axis;
	turn ldoor to z-axis <0.000000> speed <65.000000>;
	turn rdoor to z-axis <0.000000> speed <65.000000>;
	sleep 1250;
	turn lpiece to z-axis <0.000000> speed <55.000000>;
	turn rpiece to z-axis <0.000000> speed <55.000000>;
	sleep 250;
	cache pad;
	cache rpiece;
	cache lpiece;
	cache rdoor;
	cache ldoor;
	cache rnano;
	cache lnano;
	return (0);
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	dont-shade pad;
	dont-shade rpiece;
	dont-shade lpiece;
	dont-shade rdoor;
	dont-shade ldoor;
	dont-shade rnano;
	dont-shade lnano;
	spray = base;
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = rspray;
	if( spray == 0 )
	{
		piecenum = lspray;
	}
	spray = !spray;
	return (0);
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	sleep 5000;
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

StartBuilding()
{
}

StopBuilding()
{
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	explode lpiece type BITMAPONLY | BITMAP4;
	explode rpiece type BITMAPONLY | BITMAP4;
	explode pad type BITMAPONLY | BITMAP4;
	explode ldoor type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode lnano type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode rnano type FALL | BITMAP2;
		explode lnano type FALL | BITMAP3;
		explode ldoor type FALL | BITMAP4;
		explode rdoor type FALL | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode ldoor type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode rdoor type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode rpiece type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode rnano type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode pad type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	return (0);
}
