#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, missile, plat, arm1, arm2, door1, door2, flare, p1,p2;

static-var  OK, restore_delay;

// Signal definitions
#define SIG_AIM				2

#define SMOKEPIECE1 base
#define EXPLODEPIECE1 p1
#define EXPLODEPIECE2 p2


#include "StateChg.h"

activatescr()
{
	if( TRUE )
	{
		turn door1 to x-axis <130> speed <80>;
		turn door2 to x-axis <-130> speed <80>;
		sleep 900;
	}
	if( TRUE )
	{
		move plat to y-axis [18] speed [12];
		sleep 1500;
	}
	if( TRUE )
	{
		turn arm1 to x-axis <-35> speed <40>;
		turn arm2 to x-axis <35> speed <40>;	
	}
	sleep 300;
}

deactivatescr()
{
	if( TRUE )
	{
		turn arm1 to x-axis <0> speed <100>;
		turn arm2 to x-axis <0> speed <100>;
		SLEEP 500;
	}
	if( TRUE )
	{
		move plat to y-axis [0] speed [13];	
		SLEEP 1000;
	}
	if( TRUE )
	{
		turn door1 to x-axis <0> speed <80>;
		turn door2 to x-axis <0> speed <80>;
	}
	sleep 110;
}
#include "Explodepartsnorock.h"

Go()
{
	SET ARMORED to FALSE;
	dont-cache door1;
	dont-cache door2;
	dont-cache missile;
	dont-cache plat;
	dont-cache arm1;
	dont-cache arm2;
	show missile;
	call-script activatescr();
	OK = 1;
}

Stop()
{
	OK = 0;
	sleep 10000;
	call-script deactivatescr();
	cache door1;
	cache door2;
	cache missile;
	cache plat;
	cache arm1;
	cache arm2;
	SET ARMORED to TRUE;
}
#define ACTIVATECMD		call-script Go();
#define DEACTIVATECMD		call-script Stop();
#include "StateChg.h"

Create()
{
	dont-shade door1;
	dont-shade door2;
	dont-shade missile;
	dont-shade plat;
	dont-shade arm1;
	dont-shade arm2;
	dont-shade body;
	dont-shade p2;
	dont-shade p1;

	hide flare;
	OK = 0;
	restore_delay = 3000;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(time)
{
	restore_delay = time * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !OK )
	{
		sleep 1000;
		start-script RequestState(0);
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	OK = 0;
	emit-sfx 256 | 1 from flare;
	emit-sfx 256 | 1 from missile;
	SHOW flare;
	SLEEP 150;
	HIDE flare;
	hide missile;
	emit-sfx 256 | 1 from flare;
	emit-sfx 256 | 1 from missile;
	sleep 200;
	emit-sfx 256 | 1 from flare;
	emit-sfx 256 | 1 from missile;
	emit-sfx 256 | 1 from flare;
	emit-sfx 256 | 1 from missile;
	sleep 200;
	emit-sfx 256 | 1 from flare;
	emit-sfx 256 | 1 from missile;
	emit-sfx 256 | 1 from flare;
	emit-sfx 256 | 1 from missile;
	sleep 200;
	emit-sfx 256 | 1 from flare;
	emit-sfx 256 | 1 from missile;
	start-script RequestState(1);
}

QueryPrimary(piecenum)
{
	piecenum = missile;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm1 type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode missile type BITMAPONLY | BITMAP1;
		explode plat type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type SHATTER | BITMAP1;
		explode door1 type FALL | BITMAP4;
		explode door2 type FALL | BITMAP5;
		explode missile type BITMAPONLY | BITMAP1;
		explode plat type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type SHATTER | BITMAP1;
		explode arm1 type BITMAPONLY | BITMAP2;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode missile type BITMAPONLY | BITMAP1;
		explode plat type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode arm1 type BITMAPONLY | BITMAP2;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode missile type BITMAPONLY | BITMAP1;
	explode plat type BITMAPONLY | BITMAP2;
}
