#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, h1, h2, h3, h4, turret, aimer, barrel,
       muzzle, flare3, turretback, c1, c2, t2, sleeve, barrel2,
       flare, t3, sleeve2, barrel3, flare2;

static-var  restore_delay, unitviewer;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.000000>;
	turn base to z-axis anglez speed <50.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
	return (0);
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
	return (0);
}

Create()
{
	unitviewer = FALSE;
	restore_delay = 2000;
	hide flare3;
	hide flare;
	hide flare2;
	start-script SmokeUnit();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <30.000000>;
	turn aimer to x-axis <0.000000> speed <15.000000>;
	turn t2 to y-axis <0.000000> speed <90.000000>;
	turn sleeve to x-axis <0.000000> speed <50.000000>;
	turn t3 to y-axis <0.000000> speed <90.000000>;
	turn sleeve2 to x-axis <0.000000> speed <50.000000>;
	return (0);
}

Demo()
{
	unitviewer = TRUE;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare3;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <90.000000>;
	turn aimer to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn aimer around x-axis;
	wait-for-turn turret around y-axis;
	sleep 800;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	show flare3;
	sleep 350;
	hide flare3;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = flare;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = t2;
	return (0);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn t2 to y-axis heading speed <90.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn t2 around y-axis;
	wait-for-turn sleeve around x-axis;
	return (1);
}

FireSecondary()
{
	show flare;
	sleep 150;
	hide flare;
	return (0);
}

QueryTertiary(piecenum)
{
	piecenum = flare2;
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = t3;
	return (0);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn t3 to y-axis heading speed <90.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn t3 around y-axis;
	wait-for-turn sleeve2 around x-axis;
	return (1);
}

FireTertiary()
{
	show flare2;
	sleep 150;
	hide flare2;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode h1 type BITMAPONLY | BITMAP1;
		explode h2 type BITMAPONLY | BITMAP1;
		explode h3 type BITMAPONLY | BITMAP1;
		explode h4 type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		explode aimer type BITMAPONLY | BITMAP1;
		explode barrel type BITMAPONLY | BITMAP1;
		explode muzzle type BITMAPONLY | BITMAP1;
		explode flare3 type BITMAPONLY | BITMAP1;
		explode turretback type BITMAPONLY | BITMAP1;
		explode c1 type BITMAPONLY | BITMAP1;
		explode c2 type BITMAPONLY | BITMAP1;
		explode t2 type BITMAPONLY | BITMAP1;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode barrel2 type BITMAPONLY | BITMAP1;
		explode flare type BITMAPONLY | BITMAP1;
		explode t3 type BITMAPONLY | BITMAP1;
		explode sleeve2 type BITMAPONLY | BITMAP1;
		explode barrel3 type BITMAPONLY | BITMAP1;
		explode flare2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP4;
		explode h1 type SHATTER | BITMAP4;
		explode h2 type SHATTER | BITMAP4;
		explode h3 type SHATTER | BITMAP4;
		explode h4 type SHATTER | BITMAP4;
		explode turret type SHATTER | BITMAP4;
		explode aimer type SHATTER | BITMAP4;
		explode barrel type SHATTER | BITMAP4;
		explode muzzle type SHATTER | BITMAP4;
		explode flare3 type SHATTER | BITMAP4;
		explode turretback type SHATTER | BITMAP4;
		explode c1 type SHATTER | BITMAP4;
		explode c2 type SHATTER | BITMAP4;
		explode t2 type SHATTER | BITMAP4;
		explode sleeve type SHATTER | BITMAP4;
		explode barrel2 type SHATTER | BITMAP4;
		explode flare type SHATTER | BITMAP4;
		explode t3 type SHATTER | BITMAP4;
		explode sleeve2 type SHATTER | BITMAP4;
		explode barrel3 type SHATTER | BITMAP4;
		explode flare2 type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode h1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode h2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode h3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode h4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode aimer type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode muzzle type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turretback type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode c1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode c2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode t2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode t3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode sleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode h1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode h2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode h3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode h4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode aimer type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode muzzle type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turretback type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode c1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode c2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode t2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode t3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode sleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	return (0);
}
