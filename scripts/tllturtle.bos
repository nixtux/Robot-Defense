#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, feetparent, FLFoot, FRFoot, RLFoot, RRFoot, rightchunk, leftchunk, door1, door2;
piece doors, hips, flare, turret, gun;

static-var  Static_Var_1, restoredelay, bMoving,bLevel;

// Signal definitions
#define SIG_AIM				2

#define SMOKEPIECE1 base

#include "StateChg.h"


walk()
{
	if( bMoving )
	{
		move feetparent to z-axis [-0.9] now;
		move FLFoot to x-axis [-0.9] now;
		move FLFoot to y-axis [0.4] now;
		move FLFoot to z-axis [0.0] now;
		move FLFoot to z-axis [-0.4] speed [2.4];
		move FRFoot to x-axis [0.9] now;
		move FRFoot to y-axis [0.4] now;
		move FRFoot to z-axis [2.3] now;
		move FRFoot to z-axis [3.5] speed [7.6];
		move RLFoot to x-axis [-0.9] now;
		move RLFoot to y-axis [0.4] now;
		move RLFoot to z-axis [-0.7] now;
		move RLFoot to z-axis [-1.3] speed [4.0];
		move RRFoot to x-axis [0.9] now;
		move RRFoot to y-axis [0.4] now;
		move RRFoot to z-axis [-1.4] now;
		move RRFoot to z-axis [-1.7] speed [2.1];
		move body to y-axis [1.3] now;
		move body to z-axis [-0.3] now;
		move rightchunk to x-axis [0.6] now;
		move rightchunk to y-axis [1.3] now;
		move rightchunk to z-axis [-0.3] now;
		move leftchunk to x-axis [-0.6] now;
		move leftchunk to y-axis [1.3] now;
		move leftchunk to z-axis [-0.3] now;
		turn hips to y-axis <-1.5> now;
		turn hips to y-axis <3.8> speed <32.4>;
		turn FRFoot to x-axis <-17.9> now;
		turn FRFoot to x-axis <-14.8> speed <18.5>;
		turn rightchunk to x-axis <-8.0> now;
		turn rightchunk to x-axis <-11.4> speed <20.8>;
		sleep 164;
	}
	if( bMoving )
	{
		move FLFoot to z-axis [1.5] speed [11.2];
		move FRFoot to z-axis [3.5] speed [0.3];
		move RLFoot to z-axis [-1.6] speed [1.8];
		move RRFoot to z-axis [-1.6] speed [0.6];
		turn hips to y-axis <2.3> speed <9.2>;
		turn FLFoot to x-axis <-12.9> speed <78.3>;
		turn FRFoot to x-axis <0.8> speed <94.4>;
		turn RRFoot to x-axis <9.9> speed <59.9>;
		turn body to x-axis <5.5> speed <57.5>;
		turn rightchunk to x-axis <-0.4> speed <66.8>;
		turn leftchunk to x-axis <-5.7> speed <34.5>;
		sleep 165;
	}
	if( bMoving )
	{
		move FLFoot to z-axis [2.8] speed [8.1];
		move FRFoot to z-axis [2.5] speed [5.7];
		move RLFoot to z-axis [-2.1] speed [2.7];
		move RRFoot to z-axis [-1.6] speed [0.3];
		turn hips to y-axis <-1.9> speed <25.2>;
		turn FLFoot to x-axis <-30.4> speed <105.3>;
		turn RRFoot to x-axis <15.6> speed <34.3>;
		turn body to x-axis <8.4> speed <29.7>;
		turn rightchunk to x-axis <8.0> speed <50.3>;
		turn leftchunk to x-axis <-11.4> speed <34.3>;
		sleep 166;
	}
	if( bMoving )
	{
		move FRFoot to z-axis [2.3] speed [1.2];
		move RLFoot to z-axis [-2.5] speed [2.4];
		move RRFoot to z-axis [-0.6] speed [6.1];
		turn hips to y-axis <-2.3> speed <2.3>;
		turn FLFoot to x-axis <-19.0> speed <69.1>;
		turn RRFoot to x-axis <19.7> speed <25.3>;
		turn body to x-axis <2.3> speed <73.7>;
		turn rightchunk to x-axis <1.9> speed <36.8>;
		turn leftchunk to x-axis <-6.8> speed <27.6>;
		sleep 165;
	}
	if( bMoving )
	{
		move FRFoot to z-axis [1.7] speed [3.6];
		move RLFoot to z-axis [-3.2] speed [4.5];
		move RRFoot to z-axis [0.6] speed [7.2];
		turn hips to y-axis <-1.5> speed <4.6>;
		turn FLFoot to x-axis <-0.8> speed <109.8>;
		turn RRFoot to x-axis <7.6> speed <73.2>;
		turn body to x-axis <0.0> speed <13.7>;
		turn leftchunk to x-axis <0.0> speed <41.2>;
		sleep 166;
	}
	if( bMoving )
	{
		move FLFoot to z-axis [2.0] speed [5.2];
		move FRFoot to z-axis [0.7] speed [6.4];
		move RRFoot to z-axis [0.3] speed [2.1];
		turn hips to y-axis <0.0> speed <9.3>;
		turn FLFoot to x-axis <0.0> speed <4.6>;
		turn RLFoot to x-axis <22.4> speed <136.6>;
		turn RRFoot to x-axis <0.8> speed <41.7>;
		turn body to x-axis <-2.3> speed <13.9>;
		turn leftchunk to x-axis <9.1> speed <55.6>;
		sleep 164;
	}
	if( bMoving )
	{
		move FLFoot to z-axis [1.5] speed [2.7];
		move FRFoot to z-axis [0.1] speed [3.6];
		move RLFoot to z-axis [-1.8] speed [8.7];
		move RRFoot to z-axis [-0.2] speed [2.7];
		turn hips to y-axis <1.1> speed <6.9>;
		turn RLFoot to x-axis <28.9> speed <38.9>;
		turn body to x-axis <-1.1> speed <6.9>;
		turn leftchunk to x-axis <10.3> speed <6.9>;
		sleep 166;
	}
	if( bMoving )
	{
		move FLFoot to z-axis [1.0] speed [3.3];
		move FRFoot to z-axis [-0.3] speed [2.1];
		move RLFoot to z-axis [-0.5] speed [7.6];
		move RRFoot to z-axis [-0.7] speed [3.3];
		turn hips to y-axis <-1.5> speed <16.1>;
		turn RLFoot to x-axis <10.3> speed <112.8>;
		turn body to x-axis <0.0> speed <6.9>;
		turn leftchunk to x-axis <2.7> speed <46.0>;
		sleep 165;
	}
	if( bMoving )
	{
		move FLFoot to z-axis [0.8] speed [0.9];
		move FRFoot to z-axis [0.0] speed [1.8];
		move RLFoot to z-axis [0.4] speed [5.4];
		move RRFoot to z-axis [-0.9] speed [1.2];
		turn hips to y-axis <-1.9> speed <2.3>;
		turn FRFoot to x-axis <-10.3> speed <66.4>;
		turn RLFoot to x-axis <-0.4> speed <64.1>;
		turn rightchunk to x-axis <-1.1> speed <18.3>;
		turn leftchunk to x-axis <-2.7> speed <32.0>;
		sleep 166;
	}
	if( bMoving )
	{
		move FLFoot to z-axis [0.4] speed [2.7];
		move FRFoot to z-axis [1.2] speed [7.3];
		move RLFoot to z-axis [-0.4] speed [4.8];
		move RRFoot to z-axis [-1.4] speed [2.7];
		turn hips to y-axis <-2.3> speed <2.3>;
		turn FRFoot to x-axis <-12.5> speed <13.8>;
		turn rightchunk to x-axis <-4.2> speed <18.4>;
		sleep 165;
	}
	sleep 166;
}

activatescr()
{
	if( TRUE )
	{
		turn doors to y-axis <-90> speed <80>;
		wait-for-turn doors around y-axis;
		move door1 to z-axis [2.5] speed [15];
		move door2 to z-axis [-2.5] speed [15];
		wait-for-move door1 along z-axis;
	}
	if ( TRUE ) 
	{
		turn gun to x-axis <-90> speed <80>;
		move turret to z-axis [5] speed [6];
		wait-for-move turret along z-axis;
	}
	sleep 170;
}

deactivatescr()
{
	if( TRUE )
	{
		turn gun to x-axis <0> speed <80>;
		move turret to z-axis [0] speed [15];
		wait-for-move turret along z-axis;
	}
	if( TRUE )
	{
		sleep 500;
		move door1 to z-axis [0] speed [15];
		move door2 to z-axis [0] speed [15];
		wait-for-move door1 along z-axis;
		turn doors to y-axis <0> speed <80>;
		wait-for-turn doors around y-axis;
	}
	sleep 200;
}

#include "WaterSmokeUnit.h"

Go()
{
	call-script activatescr();
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	call-script deactivatescr();
}
#define ACTIVATECMD			call-script Go();
#define DEACTIVATECMD		call-script Stop();
#include "StateChg.h"

MotionControl(Moving)
{
	while( TRUE )
	{
		Moving = bMoving;
		if( Moving )
		{
			call-script walk();
		}
		if( !Moving )
		{
			turn rightchunk to x-axis <0.0> speed <150.0>;
			turn RRFoot to x-axis <0.0> speed <150.0>;
			turn FRFoot to x-axis <0.0> speed <150.0>;
			turn leftchunk to x-axis <0.0> speed <150.0>;
			turn RLFoot to x-axis <0.0> speed <150.0>;
			turn FLFoot to x-axis <0.0> speed <150.0>;
			sleep 100;
		}
	}
}

Bubbles()
{
while( bLevel >= 0 )
	{
		if ( bMoving )
		{
		emit-sfx 256 | 3 from rightchunk;
		sleep 150;
		emit-sfx 256 | 3 from leftchunk;
		}
		sleep 3050;
	}
}

Create()
{
	hide flare;
	bMoving = FALSE;
	Static_Var_1 = 0;
	bLevel=0;
	restoredelay = 10000;
	start-script SmokeUnit();
	start-script Bubbles();
	call-script InitState();
	start-script MotionControl();
}

setSFXoccupy(level)
 { 
  bLevel=level;
  }

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

RestoreAfterDelay()
{
	sleep restoredelay;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 200;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	move gun to z-axis [-2] speed [500];
	show flare;
	sleep 150;
	hide flare;
	move gun to z-axis [0] speed [3];
	sleep 3000;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{

	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode FLFoot type BITMAPONLY | BITMAP1;
		explode FRFoot type BITMAPONLY | BITMAP2;
		explode leftchunk type BITMAPONLY | BITMAP5;
		explode rightchunk type BITMAPONLY | BITMAP1;
		explode RLFoot type BITMAPONLY | BITMAP2;
		explode RRFoot type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode FLFoot type BITMAPONLY | BITMAP1;
		explode FRFoot type BITMAPONLY | BITMAP2;
		explode leftchunk type BITMAPONLY | BITMAP5;
		explode rightchunk type BITMAPONLY | BITMAP1;
		explode RLFoot type BITMAPONLY | BITMAP2;
		explode RRFoot type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type SHATTER | BITMAP1;
		explode FLFoot type BITMAPONLY | BITMAP1;
		explode FRFoot type BITMAPONLY | BITMAP2;
		explode leftchunk type BITMAPONLY | BITMAP5;
		explode rightchunk type BITMAPONLY | BITMAP1;
		explode RLFoot type BITMAPONLY | BITMAP2;
		explode RRFoot type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode FLFoot type BITMAPONLY | BITMAP1;
	explode FRFoot type BITMAPONLY | BITMAP2;
	explode leftchunk type BITMAPONLY | BITMAP5;
	explode rightchunk type BITMAPONLY | BITMAP1;
	explode RLFoot type BITMAPONLY | BITMAP2;
	explode RRFoot type BITMAPONLY | BITMAP3;
}
